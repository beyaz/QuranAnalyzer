<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ReactWithDotNet</name>
    </assembly>
    <members>
        <member name="P:ReactWithDotNet.a.download">
            <summary>
                Download file when clicking on the link (instead of navigating to the file):
            </summary>
        </member>
        <member name="P:ReactWithDotNet.a.TargetBlank">
            <summary>
                a.target = '_blank'
            </summary>
        </member>
        <member name="M:ReactWithDotNet.a.Href(System.String)">
            <summary>
                a.href = <paramref name="href" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.a.Target(System.String)">
            <summary>
                a.target = <paramref name="target" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.Href(System.String)">
            <summary>
                a.href = <paramref name="href" />
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.TargetBlank">
            <summary>
                a.target = '_blank'
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.nbsp">
            <summary>
                Creates new non-breaking space
                <br />
                &amp;nbsp;
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.nbsp(System.Int32)">
            <summary>
                Creates new non-breaking space with given <paramref name="length" />
                <br />
                &amp;nbsp;
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.DisplayFlexColumn">
            <summary>
                display = "flex"
                <br />
                flexDirection  = "column"
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.DisplayFlexColumnCentered">
            <summary>
                display = "flex"
                <br />
                flexDirection  = "column"
                <br />
                justifyContent = "center"
                <br />
                alignItems     = "center"
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.DisplayFlexRow">
            <summary>
                display = "flex"
                <br />
                flexDirection  = "row"
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.DisplayFlexRowCentered">
            <summary>
                display = "flex"
                <br />
                flexDirection  = "row"
                <br />
                justifyContent = "center"
                <br />
                alignItems     = "center"
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.DisplayInlineFlexColumn">
            <summary>
                display = "inline-flex"
                <br />
                flexDirection  = "column"
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.DisplayInlineFlexColumnCentered">
            <summary>
                display = "inline-flex"
                <br />
                flexDirection  = "column"
                <br />
                justifyContent = "center"
                <br />
                alignItems     = "center"
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.DisplayInlineFlexRow">
            <summary>
                display = "inline-flex"
                <br />
                flexDirection  = "row"
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.DisplayInlineFlexRowCentered">
            <summary>
                display = "inline-flex"
                <br />
                flexDirection  = "row"
                <br />
                justifyContent = "center"
                <br />
                alignItems     = "center"
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.Flex(System.Int32,System.Int32,ReactWithDotNet.CssUnit)">
            <summary>
                Shorthand property for assign Flex properties
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.Alt(System.String)">
            <summary>
                img.alt = <paramref name="alt" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.Src(System.String)">
            <summary>
                img.src = <paramref name="src" />
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.BackgroundColorTransparent">
            <summary>
                style.backgroundColor = 'transparent'
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.BackgroundTransparent">
            <summary>
                style.background = 'transparent'
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.BackgroundWhite">
            <summary>
                style.background = 'white'
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.ClearBoth">
            <summary>
                style.clear = 'both'
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.ClearLeft">
            <summary>
                style.clear = 'left'
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.ClearRight">
            <summary>
                style.clear = 'right'
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.ColorWhite">
            <summary>
                style.color = 'white'
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.ColorInherit">
            <summary>
                style.color = 'inherit'
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.DirectionLtr">
            <summary>
                style.direction = "ltr"
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.DirectionRtl">
            <summary>
                style.direction = "rtl"
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.DirLtr">
            <summary>
                element.dir = 'ltr'
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.DirRtl">
            <summary>
                element.dir = 'rtl'
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.DisplayBlock">
            <summary>
                style.display = 'block'
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.DisplayInlineBlock">
            <summary>
                style.display = inline-block
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.DisplayFlex">
            <summary>
                style.display = 'flex'
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.DisplayInlineFlex">
            <summary>
                style.display = 'inline-flex'
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.DisplayNone">
            <summary>
                style.display = "none"
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.FlexDirectionColumnReverse">
            <summary>
                style.flexDirection = "column-reverse"
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.FlexDirectionRow">
            <summary>
                flexDirection = "row"
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.FlexDirectionRowReverse">
            <summary>
                flexDirection = "row-reverse"
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.FloatLeft">
            <summary>
                style.float = 'left'
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.FloatRight">
            <summary>
                style.float = 'right'
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.Height100vh">
            <summary>
                style.height = "100vh"
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.HeightAuto">
            <summary>
                style.height = "auto"
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.HeightMaximized">
            <summary>
                height: 100%
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.JustifyContentCenter">
            <summary>
                <para>justifyContent = "center"</para>
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.JustifyContentFlexEnd">
            <summary>
                <para>style.justifyContent = "flex-end"</para>
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.JustifyContentFlexStart">
            <summary>
                <para>style.justifyContent = "flex-start"</para>
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.JustifyContentSpaceAround">
            <summary>
                <para>style.justifyContent = "space-around"</para>
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.JustifyContentSpaceBetween">
            <summary>
                <para>style.justifyContent = "space-between"</para>
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.JustifyContentSpaceEvenly">
            <summary>
                <para>style.justifyContent = "space-evenly"</para>
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.OverflowHidden">
            <summary>
                overflow = "hidden"
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.OverflowAuto">
            <summary>
                overflow = "auto"
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.OverflowScroll">
            <summary>
                overflow = "scroll"
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.OverflowWrapAnywhere">
            <summary>
                style.overflowWrap = 'anywhere'
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.OverflowWrapNormal">
            <summary>
                style.overflowWrap = 'normal'
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.OverflowYAuto">
            <summary>
                overflowY: auto
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.OverflowXAuto">
            <summary>
                overflowX: auto
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.OverflowXVisible">
            <summary>
                overflowX: visible
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.OverflowYVisible">
            <summary>
                overflowY: visible
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.OverflowYScroll">
            <summary>
                overflowY: scroll
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.OverflowXScroll">
            <summary>
                overflowX: scroll
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.StretchWidthHeight">
            <summary>
                width = '100%' , height = '100%'
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.TextDecorationLineThrough">
            <summary>
                textDecoration = 'line-through'
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.TextDecorationOverline">
            <summary>
                textDecoration = "overline"
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.TextDecorationUnderline">
            <summary>
                textDecoration = "underline"
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.Width100vw">
            <summary>
                style.width = "100vw"
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.WidthHeightMaximized">
            <summary>
                width: 100%
                <br />
                height: 100%
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.WidthMaximized">
            <summary>
                width: 100%
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.BackdropFilter(System.String)">
            <summary>
                style.backdropFilter = value
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.BackdropFilterBlur(System.Double)">
            <summary>
                style.backdropFilter = blur(px)
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.BackgroundImage(System.String)">
            <summary>
            The background-image property sets one or more background images for an element.
            <br/>
            By default, a background-image is placed at the top-left corner of an element, and repeated both vertically and horizontally.
            <br/>
            style.backgroundImage = <paramref name="backgroundImage"/>
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.BackgroundImage(System.String[])">
            <summary>
            The background-image property sets one or more background images for an element.
            <br/>
            By default, a background-image is placed at the top-left corner of an element, and repeated both vertically and horizontally.
            <br/>
            style.backgroundImage = <paramref name="backgroundImages[0][0]"/>, <paramref name="backgroundImages[1][1]"/>, <paramref name="backgroundImages[...][...]"/>
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.Clear(System.String)">
            <summary>
                style.clear = value
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.Content(System.String)">
            <summary>
                style.content = <paramref name="content" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.Cursor(System.String)">
            <summary>
                style.cursor = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.Dir(System.String)">
            <summary>
                initialize dir attribute of html element
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.FlexGrow(System.Double)">
            <summary>
                style.flexGrow = <paramref name="growValue" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.FlexShrink(System.Double)">
            <summary>
                Specifies how the item will shrink relative to the rest of the flexible items inside the same container.
                <br/>
                style.flexShrink = <paramref name="value" />
                <br/>
                Note: If the element is not a flexible item, the flex-shrink property has no effect.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.FlexBasis(System.String)">
            <summary>
                Specifies the initial length of a flexible item.
                <br/>
                style.flexBasis = <paramref name="value" />
                <br/>
                Note: If the element is not a flexible item, the flex-shrink property has no effect.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.FlexBasis(System.Double)">
            <summary>
                Specifies the initial length of a flexible item.
                <br/>
                style.flexBasis = <paramref name="value" /> + <b>px</b>
                <br/>
                Note: If the element is not a flexible item, the flex-shrink property has no effect.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.FlexBasisAuto">
            <summary>
                Specifies the initial length of a flexible item.
                <br/>
                style.flexBasis = auto
                <br/>
                Note: If the element is not a flexible item, the flex-shrink property has no effect.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.Float(System.String)">
            <summary>
                style.float = value
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.Height0">
            <summary>
                style.height = 0px
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.HSpace(System.Double)">
            <summary>
                Creates a new div with given width
                <br />
                new div{ style = {width = <paramref name="valueInPx" />}}
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.Id(System.String)">
            <summary>
                initialize id attribute of html element
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.Id(System.Int32)">
            <summary>
                initialize id attribute of html element
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.Id(System.Int64)">
            <summary>
                initialize id attribute of html element
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.LeftRight(System.Double)">
            <summary>
                style.left = <paramref name="pixelValue" /> + 'px'
                <br />
                style.right = <paramref name="pixelValue" /> + 'px'
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.LeftRightBottom(System.String)">
            <summary>
                style.left = <paramref name="value" /> 
                <br />
                style.right = <paramref name="value" />
                <br />
                style.bottom = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.LeftRightBottom(System.Double)">
            <summary>
                style.left = <paramref name="value" /> + 'px'
                <br />
                style.right = <paramref name="value" /> + 'px'
                <br />
                style.bottom = <paramref name="value" /> + 'px'
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.ListStyle(System.String)">
            <summary>
                style.listStyle = <paramref name="listStyle" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.ListStyleInside">
            <summary>
                style.listStyle = 'inside'
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.ListStyleNone">
            <summary>
                style.listStyle = 'none'
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.ListStyleSquare">
            <summary>
                style.listStyle = 'square'
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.MaxHeight(System.String)">
            <summary>
                style.maxHeight = <paramref name="maxHeight" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.MaxHeight(System.Double)">
            <summary>
                style.maxHeight = <paramref name="maxHeight" /> + "px"
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.MaxWidth(System.String)">
            <summary>
                style.maxWidth = <paramref name="maxWidth" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.MaxWidth(System.Double)">
            <summary>
                style.maxWidth = <paramref name="maxWidth" /> + 'px'
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.MinHeight(System.String)">
            <summary>
                style.minHeight = <paramref name="minHeight" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.MinHeight(System.Double)">
            <summary>
                style.minHeight = <paramref name="minHeight" /> + "px"
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.MinWidth(System.String)">
            <summary>
                style.minWidth = minWidth
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.MinWidth(System.Double)">
            <summary>
                style.minWidth = minWidth + 'px'
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.OnScroll(System.String)">
            <summary>
                Handler <paramref name="jsMethodName" /> should be in client js codes.<br />
                <br />
                Sample Usage:<br />
                <br />
                ReactWithDotNet.RegisterExternalJsObject(<paramref name="jsMethodName" />, function(e){<br />
                ...<br />
                ...<br />
                });
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.Right(System.String)">
            <summary>
                style.right = right
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.Right(System.Double)">
            <summary>
                style.right = right + 'px'
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.Role(System.String)">
            <summary>
                Roles define the semantic meaning of content, allowing screen readers and other tools to present and support
                interaction with an object in a way that is consistent with user expectations of that type of object.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.SpaceX(System.Double)">
            <summary>
                Creates new div element wihth given width
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.SpaceY(System.Double)">
            <summary>
                Creates new div element wihth given height
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.DangerouslySetInnerHTML(System.String)">
            <summary>
                Assign dangerouslySetInnerHTML of given element
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.Title(System.String)">
            <summary>
                element.title = title
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.TopBottom(System.Double)">
            <summary>
                style.top = <paramref name="pixelValue" /> + 'px'
                <br />
                style.bottom = <paramref name="pixelValue" /> + 'px'
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.VSpace(System.Double)">
            <summary>
                Creates a new div with given height
                <br />
                new div{ style = {height = <paramref name="valueInPx" />}}
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.wh(System.Double)">
            <summary>
                style.width = <paramref name="pixelValue" /> + 'px'
                <br />
                style.height = <paramref name="pixelValue" /> + 'px'
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.When(System.Boolean,ReactWithDotNet.StyleModifier[])">
            <summary>
                Apply given modifiers when condition is true
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.When(System.Boolean,ReactWithDotNet.Element)">
            <summary>
                Returns given <paramref name="element" /> when condition is true otherwise returns null
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.When(System.Nullable{System.Boolean},ReactWithDotNet.Element)">
            <summary>
                Returns given <paramref name="element" /> when condition is true otherwise returns null
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.When(System.Boolean,System.Func{ReactWithDotNet.Element})">
            <summary>
                Calls given <paramref name="elementFunc" /> when condition is true otherwise returns null
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.When(System.Nullable{System.Boolean},System.Func{ReactWithDotNet.Element})">
            <summary>
                Calls given <paramref name="elementFunc" /> when condition is true otherwise returns null
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.m(System.Double)">
            <summary>
                style.margin = <paramref name="margin" /> + 'px'
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.m(System.String)">
            <summary>
                style.margin = <paramref name="margin" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.mr(System.Double)">
            <summary>
                style.marginRight = <paramref name="marginRight" /> + 'px'
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.mr(System.String)">
            <summary>
                style.marginRight = <paramref name="marginRight" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.ml(System.Double)">
            <summary>
                style.marginLeft = <paramref name="marginLeft" /> + 'px'
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.ml(System.String)">
            <summary>
                style.marginLeft = <paramref name="marginLeft" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.mt(System.Double)">
            <summary>
                style.marginTop = <paramref name="marginTop" /> + 'px'
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.mt(System.String)">
            <summary>
                style.marginTop = <paramref name="marginTop" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.mb(System.Double)">
            <summary>
                style.marginBottom = <paramref name="marginBottom" /> + 'px'
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.mb(System.String)">
            <summary>
                style.marginBottom = <paramref name="marginBottom" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.mx(System.Double)">
            <summary>
                style.marginLeft = <paramref name="value" /> + 'px'
                <br />
                style.marginRight = <paramref name="value" /> + 'px'
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.mx(System.String)">
            <summary>
                style.marginLeft = <paramref name="value" />
                <br />
                style.marginRight = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.my(System.Double)">
            <summary>
                style.marginTop = <paramref name="value" /> + 'px'
                <br />
                style.marginBottom = <paramref name="value" /> + 'px'
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.my(System.String)">
            <summary>
                style.marginTop = <paramref name="value" />
                <br />
                style.marginBottom = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.p(System.Double)">
            <summary>
                style.padding = <paramref name="padding" /> + 'px'
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.p(System.String)">
            <summary>
                style.padding = <paramref name="padding" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.pr(System.Double)">
            <summary>
                style.paddingRight = <paramref name="paddingRight" /> + 'px'
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.pr(System.String)">
            <summary>
                style.paddingRight = <paramref name="paddingRight" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.pl(System.Double)">
            <summary>
                style.paddingLeft = <paramref name="paddingLeft" /> + 'px'
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.pl(System.String)">
            <summary>
                style.paddingLeft = <paramref name="paddingLeft" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.pt(System.Double)">
            <summary>
                style.paddingTop = <paramref name="paddingTop" /> + 'px'
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.pt(System.String)">
            <summary>
                style.paddingTop = <paramref name="paddingTop" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.pb(System.Double)">
            <summary>
                style.paddingBottom = <paramref name="paddingBottom" /> + 'px'
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.pb(System.String)">
            <summary>
                style.paddingBottom = <paramref name="paddingBottom" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.px(System.Double)">
            <summary>
                style.paddingLeft = <paramref name="value" /> + 'px'
                <br />
                style.paddingRight = <paramref name="value" /> + 'px'
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.px(System.String)">
            <summary>
                style.paddingLeft = <paramref name="value" />
                <br />
                style.paddingRight = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.py(System.Double)">
            <summary>
                style.paddingTop = <paramref name="value" /> + 'px'
                <br />
                style.paddingBottom = <paramref name="value" /> + 'px'
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.py(System.String)">
            <summary>
                style.paddingTop = <paramref name="value" />
                <br />
                style.paddingBottom = <paramref name="value" />
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.FontSizeLarge">
            <summary>
                style.fontSize = 'large'
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.FontSizeLarger">
            <summary>
                style.fontSize = 'larger'
                <br />
                Sets the font-size to a larger size than the parent element
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.FontSizeSmall">
            <summary>
                style.fontSize = 'small'
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.FontWeightExtraBold">
            <summary>
                style.fontWeight = '800'
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.FontWeightMedium">
            <summary>
                style.fontWeight = '500'
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.FontWeightSemiBold">
            <summary>
                style.fontWeight = '600'
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.LetterSpacingNormal">
            <summary>
                style.letterSpacing = normal
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.MozOsxFontSmoothingGrayScale">
            <summary>
                <b>-moz-osx-font-smoothing</b> = grayscale
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.WebkitFontSmoothingAntialiased">
            <summary>
                <b>-webkit-font-smoothing</b> = grayscale
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.FontFamily(System.String)">
            <summary>
                style.fontFamily = fontFamily
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.LetterSpacing(System.Double)">
            <summary>
                style.letterSpacing = <paramref name="letterSpacingAsPixel" /> + 'px'
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.MozOsxFontSmoothing(System.String)">
            <summary>
                <b>-moz-osx-font-smoothing</b> = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.WebkitFontSmoothing(System.String)">
            <summary>
                <b>-webkit-font-smoothing</b> = <paramref name="value" />
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.AlignItemsCenter">
            <summary>
                <para>style.alignItems = "center"</para>
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.AlignContentCenter">
            <summary>
                <para>style.alignContent = "center"</para>
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.AlignContentFlexStart">
            <summary>
                <para>style.alignContent = "flex-start"</para>
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.AlignContentFlexEnd">
            <summary>
                <para>style.alignContent = "flex-end"</para>
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.AlignContentStretch">
            <summary>
                <para>style.alignContent = "stretch"</para>
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.AlignContentSpaceAround">
            <summary>
                <para>style.alignContent = "space-around"</para>
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.AlignContentSpaceBetween">
            <summary>
                <para>style.alignContent = "space-between"</para>
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.AlignSelf(System.String)">
            <summary>
                <para>style.alignSelf = <paramref name="value" /></para>
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.AlignSelfaAuto">
            <summary>
                <para>style.alignSelf = "auto"</para>
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.AlignSelfStretch">
            <summary>
                <para>style.alignSelf = "stretch"</para>
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.AlignSelfCenter">
            <summary>
                <para>style.alignSelf = "center"</para>
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.AlignSelfFlexStart">
            <summary>
                <para>style.alignSelf = "flex-start"</para>
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.AlignSelfFlexEnd">
            <summary>
                <para>style.alignSelf = "flex-end"</para>
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.AlignSelfBaseline">
            <summary>
                <para>style.alignSelf = "baseline"</para>
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.AlignSelfInitial">
            <summary>
                <para>style.alignSelf = "initial"</para>
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.AlignSelfInherit">
            <summary>
                <para>style.alignSelf = "inherit"</para>
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.WhiteSpaceBreakSpaces">
            <summary>
                style.whiteSpace = break-spaces
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.WhiteSpaceNormal">
            <summary>
                style.whiteSpace = normal
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.WhiteSpaceNoWrap">
            <summary>
                style.whiteSpace = nowrap
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.WhiteSpacePre">
            <summary>
                style.whiteSpace = pre
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.WhiteSpacePreLine">
            <summary>
                style.whiteSpace = pre-line
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.WhiteSpacePreWrap">
            <summary>
                style.whiteSpace = pre-wrap
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.WordBreakAll">
            <summary>
                <para>style.wordBreak = "break-all"</para>
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.WordBreakKeepAll">
            <summary>
                <para>style.wordBreak = "keep-all"</para>
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.WordBreakNormal">
            <summary>
                <para>style.wordBreak = "normal"</para>
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.WordBreakWord">
            <summary>
                <para>style.wordBreak = "break-word"</para>
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.WhiteSpace(System.String)">
            <summary>
                style.whiteSpace = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.WordBreak(System.String)">
            <summary>
                style.wordBreak = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.WordWrap(System.String)">
            <summary>
                style.wordWrap = <paramref name="value" />
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.WordWrapNormal">
            <summary>
                style.wordWrap = normal
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.WordWrapBreakWord">
            <summary>
                style.wordWrap = break-word
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.Opacity0">
            <summary>
                style.opacity = 0
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.Opacity1">
            <summary>
                style.opacity = 1
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.TextTransformCapitalize">
            <summary>
                style.textTransform = 'capitalize'
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.TextTransformLowerCase">
            <summary>
                style.textTransform = 'lowercase'
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.TextTransformUpperCase">
            <summary>
                style.textTransform = 'uppercase'
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.VisibilityCollapse">
            <summary>
                style.visibility = 'collapse'
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.VisibilityHidden">
            <summary>
                style.visibility = 'hidden'
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.VisibilityVisible">
            <summary>
                style.visibility = 'visible'
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.Opacity(System.String)">
            <summary>
                style.opacity = <paramref name="opacity" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.Opacity(System.Double)">
            <summary>
                style.opacity = <paramref name="opacity" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.TextTransform(System.String)">
            <summary>
                style.textTransform = <paramref name="textTransform" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.Transform(System.String)">
            <summary>
                style.transform = <paramref name="transform" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.Transition(System.String)">
            <summary>
                style.transition = <paramref name="transition" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.Transition(System.String,System.Double)">
            <summary>
                style.transition = {<paramref name="propertyName" />} {<paramref name="durationAsMilliseconds" />}ms
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.Transition(System.String,System.Double,System.Double)">
            <summary>
                style.transition = {<paramref name="propertyName" />} {<paramref name="durationAsMilliseconds" />}ms {
                <paramref name="delayAsMilliseconds" />}ms
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.Transition(System.String,System.Double,System.String)">
            <summary>
                style.transition = {<paramref name="propertyName" />} {<paramref name="durationAsMilliseconds" />}ms {
                <paramref name="easingFunction" />}
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.Transition(System.String,System.Double,System.String,System.Double)">
            <summary>
                style.transition = {<paramref name="propertyName" />} {<paramref name="durationAsMilliseconds" />}ms {
                <paramref name="easingFunction" />} {<paramref name="delayAsMilliseconds" />}ms
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.Visibility(System.String)">
            <summary>
                style.visibility = <paramref name="visibility" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.TransformOrigin(System.String)">
            <summary>
                style.transformOrigin = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.MediaQueryOnDesktop(ReactWithDotNet.Style)">
            <summary>
                min-width: 1024px
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.MediaQueryOnDesktop(ReactWithDotNet.StyleModifier[])">
            <summary>
                min-width: 1024px
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.MediaQueryOnMobile(ReactWithDotNet.Style)">
            <summary>
                max-width: 767px
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.MediaQueryOnMobile(ReactWithDotNet.StyleModifier[])">
            <summary>
                max-width: 767px
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.MediaQueryOnMobileOrTablet(ReactWithDotNet.Style)">
            <summary>
                max-width: 1023px
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.MediaQueryOnMobileOrTablet(ReactWithDotNet.StyleModifier[])">
            <summary>
                max-width: 1023px
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.MediaQueryOnTablet(ReactWithDotNet.Style)">
            <summary>
                min-width: 768px and max-width: 1023px
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.MediaQueryOnTablet(ReactWithDotNet.StyleModifier[])">
            <summary>
                min-width: 768px and max-width: 1023px
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.MediaQueryOnTabletOrDesktop(ReactWithDotNet.Style)">
            <summary>
                min-width: 768px
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.MediaQueryOnTabletOrDesktop(ReactWithDotNet.StyleModifier[])">
            <summary>
                min-width: 768px
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.WhenMediaSizeIsMobile(ReactWithDotNet.Style)">
            <summary>
                max-width: 767px
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.WhenMediaSizeIsMobile(ReactWithDotNet.StyleModifier[])">
            <summary>
                max-width: 767px
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.WhenMediaSizeIsGreaterThanMobile(ReactWithDotNet.Style)">
            <summary>
                min-width: 768px
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.WhenMediaSizeIsGreaterThanMobile(ReactWithDotNet.StyleModifier[])">
            <summary>
                min-width: 768px
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.WhenMediaSizeIsGreaterThan(System.Int32,ReactWithDotNet.StyleModifier[])">
            <summary>
                min-width: <paramref name="widthAsPixel"/> + 'px'
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.WhenMediaSizeIsLessThan(System.Int32,ReactWithDotNet.StyleModifier[])">
            <summary>
                max-width: <paramref name="widthAsPixel"/> + 'px'
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.WhenMediaSizeBetween(System.Int32,System.Int32,ReactWithDotNet.StyleModifier[])">
            <summary>
                (min-width: <paramref name="minWidthAsPixel"/> + 'px') and (max-width: <paramref name="maxWidthAsPixel"/> + 'px')
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.BorderColor(System.String)">
            <summary>
                style.borderColor = <paramref name="color" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.TextIndent(System.String)">
            <summary>
            specifies the indentation of the first line in a text-block
            <br/>
            style.textIndent = <paramref name="value"/>
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.TextIndent(System.Double)">
            <summary>
            specifies the indentation of the first line in a text-block
            <br/>
            style.textIndent = <paramref name="valueInPixel"/> + 'px'
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.BorderTopRight(System.String)">
            <summary>
                style.borderTop = <paramref name="borderValue"/>
            <br/>
                style.borderRight = <paramref name="borderValue"/>
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.BorderLeftTop(System.String)">
            <summary>
                style.borderLeft = <paramref name="borderValue"/>
            <br/>
                style.borderTop = <paramref name="borderValue"/>
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.BorderRightBottom(System.String)">
            <summary>
                style.borderRight = <paramref name="borderValue"/>
            <br/>
                style.borderBottom = <paramref name="borderValue"/>
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.BorderLeftBottom(System.String)">
            <summary>
                style.borderLeft = <paramref name="borderValue"/>
            <br/>
                style.borderBottom = <paramref name="borderValue"/>
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.BorderTopBottom(System.String)">
            <summary>
                style.borderTop = <paramref name="borderValue"/>
            <br/>
                style.borderBottom = <paramref name="borderValue"/>
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.BorderLeftRight(System.String)">
            <summary>
                style.borderLeft = <paramref name="borderValue"/>
            <br/>
                style.borderRight = <paramref name="borderValue"/>
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.Dashed(System.Double,System.String)">
            <summary>
                Returns a string like <paramref name="widthAsPx" /><b> + px dashed + </b> <paramref name="color" />"
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.Dotted(System.Double,System.String)">
            <summary>
                Returns a string like <paramref name="widthAsPx" /><b> + px dotted + </b> <paramref name="color" />"
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.Solid(System.Double,System.String)">
            <summary>
                Returns a string like <paramref name="widthAsPx" /><b> + px solid + </b> <paramref name="color" />"
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.url(System.String)">
            <summary>
            "url(urlValue)
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.Outline(System.String)">
            <summary>
                style.outline = <paramref name="value" />
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.OutlineNone">
            <summary>
                style.outline = none
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.BorderCollapse(System.String)">
            <summary>
            Sets whether table borders should collapse into a single border or be separated as in standard HTML.
            <br/>
            style.borderCollapse = <paramref name="value"/>
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.BorderCollapseCollapse">
            <summary>
                style.borderCollapse = collapse
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.BorderCollapseSeparate">
            <summary>
                style.borderCollapse = separate
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.CellSpacing(System.Nullable{System.Double})">
            <summary>
                table.cellSpacing = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.CellPadding(System.Nullable{System.Double})">
            <summary>
                table.cellPadding = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.ColSpan(System.Int32)">
            <summary>
                (tr-td).colSpan = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.RowSpan(System.Int32)">
            <summary>
                (tr-td).rowSpan = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.MixBlendMode(System.String)">
            <summary>
            normal|multiply|screen|overlay|darken|lighten|color-dodge|color-burn|difference|exclusion|hue|saturation|color|luminosity
            </summary>
        </member>
        <member name="F:ReactWithDotNet.Mixin.percent">
            <summary>
                50|percent returns like '50%'
            </summary>
        </member>
        <member name="F:ReactWithDotNet.Mixin.rem">
            <summary>
                2|rem returns like '2rem'
            </summary>
        </member>
        <member name="F:ReactWithDotNet.Mixin.vh">
            <summary>
                7|vh returns like '7vh'
            </summary>
        </member>
        <member name="F:ReactWithDotNet.Mixin.vw">
            <summary>
                7|vw returns like '7vw'
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.linear_gradient(System.Int32,System.String,System.String)">
            <summary>
                'linear-gradient(<paramref name="degree" /><b>+deg</b>, <paramref name="fromColor" />, <paramref name="toColor" />
                )'
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.linear_gradientTo(System.String,System.String,System.String,System.String)">
            <summary>
                'linear-gradient(<b>to </b><paramref name="directionFrom" /> <paramref name="directionTo" />,
                <paramref name="fromColor" />, <paramref name="toColor" />)'
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.linear_gradientTo(System.String,System.String,System.String)">
            <summary>
                'linear-gradient(<b>to </b> <paramref name="targetDirection" />,
                <paramref name="fromColor" />, <paramref name="toColor" />)'
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.rgb(System.Double,System.Double,System.Double)">
            <summary>
                Return new string as 'rgb(<paramref name="red" />, <paramref name="green" />, <paramref name="blue" />)'
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.rgba(System.Double,System.Double,System.Double,System.Double)">
            <summary>
                Return new string as 'rgb(<paramref name="red" />, <paramref name="green" />, <paramref name="blue" />,
                <paramref name="alpha" />)'
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.cubic_bezier(System.Double,System.Double,System.Double,System.Double)">
            <summary>
                cubic-bezier(<paramref name="x1"/>, <paramref name="y1"/>, <paramref name="x2"/>, <paramref name="y2"/>)
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.BackgroundRepeatInherit">
            <summary>
                style.backgroundRepeat = inherit
                <br />
                Inherits this property from its parent element.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.BackgroundRepeatInitial">
            <summary>
                style.backgroundRepeat = initial
                <br />
                Sets this property to its default value.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.BackgroundRepeatNoRepeat">
            <summary>
                style.backgroundRepeat = no-repeat
                <br />
                The background-image is not repeated. The image will only be shown once
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.BackgroundRepeatRepeat">
            <summary>
                style.backgroundRepeat = repeat
                <br />
                The background image is repeated both vertically and horizontally.  The last image will be clipped if it does not
                fit. This is default
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.BackgroundRepeatRepeatX">
            <summary>
                style.backgroundRepeat = repeat-x
                <br />
                The background image is repeated only horizontally
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.BackgroundRepeatRepeatY">
            <summary>
                style.backgroundRepeat = repeat-y
                <br />
                The background image is repeated only vertically
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.BackgroundRepeatRound">
            <summary>
                style.backgroundRepeat = round
                <br />
                The background-image is repeated and squished or stretched to fill the space (no gaps)
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.BackgroundRepeatSpace">
            <summary>
                style.backgroundRepeat = space
                <br />
                The background-image is repeated as much as possible without clipping. The first and last image is pinned to either
                side of the element, and whitespace is distributed evenly between the images
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.BackgroundSizeContain">
            <summary>
                style.backgroundSize = contain
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.BackgroundSizeCover">
            <summary>
                style.backgroundSize = cover
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.ObjectFitContain">
            <summary>
                The image keeps its aspect ratio, but is resized to fit within the given dimension
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.ObjectFitCover">
            <summary>
                The image keeps its aspect ratio and fills the given dimension. The image will be clipped to fit
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.ObjectFitFill">
            <summary>
                This is default. The image is resized to fill the given dimension. If necessary, the image will be stretched or
                squished to fit
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.ObjectFitNone">
            <summary>
                The image is not resized
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Mixin.ObjectFitScaleDown">
            <summary>
                the image is scaled down to the smallest version of none or contain
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.BackgroundRepeat(System.String)">
            <summary>
                style.backgroundRepeat = <paramref name="value" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.BackgroundSize(System.String)">
            <summary>
                The background-size property specifies the size of the background images.
                <br />
               There are four different syntaxes you can use with this property: the keyword syntax ("auto", "cover" and "contain"), the one-value syntax (sets the width of the image (height becomes "auto"), the two-value syntax (first value: width of the image, second value: height), and the multiple background syntax (separated with comma).
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.ObjectFit(System.String)">
            <summary>
                The CSS object-fit property is used to specify how an img or video should be resized to fit its container.
                <br />
                This property tells the content to fill the container in a variety of ways; such as "preserve that aspect ratio" or
                "stretch up and take up as much space as possible".
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.Size(System.Double,System.Double)">
            <summary>
                style.width = <paramref name="width" /> + 'px'
                <br/>
                style.height = <paramref name="height" /> + 'px'
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.Fill(System.String)">
            <summary>
                svg.fill = <paramref name="color" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.ViewBox(System.String)">
            <summary>
                svg.viewBox = <paramref name="viewBox" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.ViewBox(System.Double,System.Double,System.Double,System.Double)">
            <summary>
                svg.viewBox = '<paramref name="minX" /> <paramref name="minY" /> <paramref name="width" /> <paramref name="height" />'
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Mixin.ClipPath(System.String)">
            <summary>
                g.clipPath = <paramref name="value" />
            </summary>
        </member>
        <member name="T:ReactWithDotNet.article">
            <summary>
                Specifies independent, self-contained content.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.article.#ctor">
            <summary>
                Specifies independent, self-contained content.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.article.#ctor(ReactWithDotNet.IModifier[])">
            <summary>
                Specifies independent, self-contained content.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.article.#ctor(System.String)">
            <summary>
                Specifies independent, self-contained content.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.article.op_Implicit(System.String)~ReactWithDotNet.article">
            <summary>
                Specifies independent, self-contained content.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.article.#ctor(ReactWithDotNet.Style)">
            <summary>
                Specifies independent, self-contained content.
            </summary>
        </member>
        <member name="T:ReactWithDotNet.p">
            <summary>
                Defines a paragraph
            </summary>
        </member>
        <member name="M:ReactWithDotNet.p.#ctor">
            <summary>
                Defines a paragraph
            </summary>
        </member>
        <member name="M:ReactWithDotNet.p.#ctor(ReactWithDotNet.IModifier[])">
            <summary>
                Defines a paragraph
            </summary>
        </member>
        <member name="M:ReactWithDotNet.p.#ctor(System.String)">
            <summary>
                Defines a paragraph
            </summary>
        </member>
        <member name="M:ReactWithDotNet.p.op_Implicit(System.String)~ReactWithDotNet.p">
            <summary>
                Defines a paragraph
            </summary>
        </member>
        <member name="M:ReactWithDotNet.p.#ctor(ReactWithDotNet.Style)">
            <summary>
                Defines a paragraph
            </summary>
        </member>
        <member name="T:ReactWithDotNet.pre">
            <summary>
                Preformatted text
            </summary>
        </member>
        <member name="M:ReactWithDotNet.pre.#ctor">
            <summary>
                Preformatted text
            </summary>
        </member>
        <member name="M:ReactWithDotNet.pre.#ctor(ReactWithDotNet.IModifier[])">
            <summary>
                Preformatted text
            </summary>
        </member>
        <member name="M:ReactWithDotNet.pre.#ctor(System.String)">
            <summary>
                Preformatted text
            </summary>
        </member>
        <member name="M:ReactWithDotNet.pre.op_Implicit(System.String)~ReactWithDotNet.pre">
            <summary>
                Preformatted text
            </summary>
        </member>
        <member name="M:ReactWithDotNet.pre.#ctor(ReactWithDotNet.Style)">
            <summary>
                Preformatted text
            </summary>
        </member>
        <member name="T:ReactWithDotNet.code">
            <summary>
                Define some text as computer code in a document
            </summary>
        </member>
        <member name="M:ReactWithDotNet.code.#ctor">
            <summary>
                Define some text as computer code in a document
            </summary>
        </member>
        <member name="M:ReactWithDotNet.code.#ctor(ReactWithDotNet.IModifier[])">
            <summary>
                Define some text as computer code in a document
            </summary>
        </member>
        <member name="M:ReactWithDotNet.code.#ctor(System.String)">
            <summary>
                Define some text as computer code in a document
            </summary>
        </member>
        <member name="M:ReactWithDotNet.code.op_Implicit(System.String)~ReactWithDotNet.code">
            <summary>
                Define some text as computer code in a document
            </summary>
        </member>
        <member name="M:ReactWithDotNet.code.#ctor(ReactWithDotNet.Style)">
            <summary>
                Define some text as computer code in a document
            </summary>
        </member>
        <member name="T:ReactWithDotNet.ol">
            <summary>
                Ordered list
            </summary>
        </member>
        <member name="M:ReactWithDotNet.ol.#ctor">
            <summary>
                Ordered list
            </summary>
        </member>
        <member name="M:ReactWithDotNet.ol.#ctor(ReactWithDotNet.IModifier[])">
            <summary>
                Ordered list
            </summary>
        </member>
        <member name="M:ReactWithDotNet.ol.#ctor(System.String)">
            <summary>
                Ordered list
            </summary>
        </member>
        <member name="M:ReactWithDotNet.ol.op_Implicit(System.String)~ReactWithDotNet.ol">
            <summary>
                Ordered list
            </summary>
        </member>
        <member name="M:ReactWithDotNet.ol.#ctor(ReactWithDotNet.Style)">
            <summary>
                Ordered list
            </summary>
        </member>
        <member name="T:ReactWithDotNet.ul">
            <summary>
                Unordered (bulleted) list
            </summary>
        </member>
        <member name="M:ReactWithDotNet.ul.#ctor">
            <summary>
                Unordered (bulleted) list
            </summary>
        </member>
        <member name="M:ReactWithDotNet.ul.#ctor(ReactWithDotNet.IModifier[])">
            <summary>
                Unordered (bulleted) list
            </summary>
        </member>
        <member name="M:ReactWithDotNet.ul.#ctor(System.String)">
            <summary>
                Unordered (bulleted) list
            </summary>
        </member>
        <member name="M:ReactWithDotNet.ul.op_Implicit(System.String)~ReactWithDotNet.ul">
            <summary>
                Unordered (bulleted) list
            </summary>
        </member>
        <member name="M:ReactWithDotNet.ul.#ctor(ReactWithDotNet.Style)">
            <summary>
                Unordered (bulleted) list
            </summary>
        </member>
        <member name="T:ReactWithDotNet.li">
            <summary>
                List item
            </summary>
        </member>
        <member name="M:ReactWithDotNet.li.#ctor">
            <summary>
                List item
            </summary>
        </member>
        <member name="M:ReactWithDotNet.li.#ctor(ReactWithDotNet.IModifier[])">
            <summary>
                List item
            </summary>
        </member>
        <member name="M:ReactWithDotNet.li.#ctor(System.String)">
            <summary>
                List item
            </summary>
        </member>
        <member name="M:ReactWithDotNet.li.op_Implicit(System.String)~ReactWithDotNet.li">
            <summary>
                List item
            </summary>
        </member>
        <member name="M:ReactWithDotNet.li.#ctor(ReactWithDotNet.Style)">
            <summary>
                List item
            </summary>
        </member>
        <member name="T:ReactWithDotNet.span">
            <summary>
                Inline container used to mark up a part of a text, or a part of a document.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.span.#ctor">
            <summary>
                Inline container used to mark up a part of a text, or a part of a document.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.span.#ctor(ReactWithDotNet.IModifier[])">
            <summary>
                Inline container used to mark up a part of a text, or a part of a document.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.span.#ctor(System.String)">
            <summary>
                Inline container used to mark up a part of a text, or a part of a document.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.span.op_Implicit(System.String)~ReactWithDotNet.span">
            <summary>
                Inline container used to mark up a part of a text, or a part of a document.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.span.#ctor(ReactWithDotNet.Style)">
            <summary>
                Inline container used to mark up a part of a text, or a part of a document.
            </summary>
        </member>
        <member name="T:ReactWithDotNet.sup">
            <summary>
                Superscript text
            </summary>
        </member>
        <member name="M:ReactWithDotNet.sup.#ctor">
            <summary>
                Superscript text
            </summary>
        </member>
        <member name="M:ReactWithDotNet.sup.#ctor(ReactWithDotNet.IModifier[])">
            <summary>
                Superscript text
            </summary>
        </member>
        <member name="M:ReactWithDotNet.sup.#ctor(System.String)">
            <summary>
                Superscript text
            </summary>
        </member>
        <member name="M:ReactWithDotNet.sup.op_Implicit(System.String)~ReactWithDotNet.sup">
            <summary>
                Superscript text
            </summary>
        </member>
        <member name="M:ReactWithDotNet.sup.#ctor(ReactWithDotNet.Style)">
            <summary>
                Superscript text
            </summary>
        </member>
        <member name="T:ReactWithDotNet.sub">
            <summary>
                Subscript text
            </summary>
        </member>
        <member name="M:ReactWithDotNet.sub.#ctor">
            <summary>
                Subscript text
            </summary>
        </member>
        <member name="M:ReactWithDotNet.sub.#ctor(ReactWithDotNet.IModifier[])">
            <summary>
                Subscript text
            </summary>
        </member>
        <member name="M:ReactWithDotNet.sub.#ctor(System.String)">
            <summary>
                Subscript text
            </summary>
        </member>
        <member name="M:ReactWithDotNet.sub.op_Implicit(System.String)~ReactWithDotNet.sub">
            <summary>
                Subscript text
            </summary>
        </member>
        <member name="M:ReactWithDotNet.sub.#ctor(ReactWithDotNet.Style)">
            <summary>
                Subscript text
            </summary>
        </member>
        <member name="T:ReactWithDotNet.ins">
            <summary>
                Inserted text
            </summary>
        </member>
        <member name="M:ReactWithDotNet.ins.#ctor">
            <summary>
                Inserted text
            </summary>
        </member>
        <member name="M:ReactWithDotNet.ins.#ctor(ReactWithDotNet.IModifier[])">
            <summary>
                Inserted text
            </summary>
        </member>
        <member name="M:ReactWithDotNet.ins.#ctor(System.String)">
            <summary>
                Inserted text
            </summary>
        </member>
        <member name="M:ReactWithDotNet.ins.op_Implicit(System.String)~ReactWithDotNet.ins">
            <summary>
                Inserted text
            </summary>
        </member>
        <member name="M:ReactWithDotNet.ins.#ctor(ReactWithDotNet.Style)">
            <summary>
                Inserted text
            </summary>
        </member>
        <member name="T:ReactWithDotNet.del">
            <summary>
                Deleted text
            </summary>
        </member>
        <member name="M:ReactWithDotNet.del.#ctor">
            <summary>
                Deleted text
            </summary>
        </member>
        <member name="M:ReactWithDotNet.del.#ctor(ReactWithDotNet.IModifier[])">
            <summary>
                Deleted text
            </summary>
        </member>
        <member name="M:ReactWithDotNet.del.#ctor(System.String)">
            <summary>
                Deleted text
            </summary>
        </member>
        <member name="M:ReactWithDotNet.del.op_Implicit(System.String)~ReactWithDotNet.del">
            <summary>
                Deleted text
            </summary>
        </member>
        <member name="M:ReactWithDotNet.del.#ctor(ReactWithDotNet.Style)">
            <summary>
                Deleted text
            </summary>
        </member>
        <member name="T:ReactWithDotNet.small">
            <summary>
                Smaller text
            </summary>
        </member>
        <member name="M:ReactWithDotNet.small.#ctor">
            <summary>
                Smaller text
            </summary>
        </member>
        <member name="M:ReactWithDotNet.small.#ctor(ReactWithDotNet.IModifier[])">
            <summary>
                Smaller text
            </summary>
        </member>
        <member name="M:ReactWithDotNet.small.#ctor(System.String)">
            <summary>
                Smaller text
            </summary>
        </member>
        <member name="M:ReactWithDotNet.small.op_Implicit(System.String)~ReactWithDotNet.small">
            <summary>
                Smaller text
            </summary>
        </member>
        <member name="M:ReactWithDotNet.small.#ctor(ReactWithDotNet.Style)">
            <summary>
                Smaller text
            </summary>
        </member>
        <member name="T:ReactWithDotNet.mark">
            <summary>
                Marked text
            </summary>
        </member>
        <member name="M:ReactWithDotNet.mark.#ctor">
            <summary>
                Marked text
            </summary>
        </member>
        <member name="M:ReactWithDotNet.mark.#ctor(ReactWithDotNet.IModifier[])">
            <summary>
                Marked text
            </summary>
        </member>
        <member name="M:ReactWithDotNet.mark.#ctor(System.String)">
            <summary>
                Marked text
            </summary>
        </member>
        <member name="M:ReactWithDotNet.mark.op_Implicit(System.String)~ReactWithDotNet.mark">
            <summary>
                Marked text
            </summary>
        </member>
        <member name="M:ReactWithDotNet.mark.#ctor(ReactWithDotNet.Style)">
            <summary>
                Marked text
            </summary>
        </member>
        <member name="T:ReactWithDotNet.em">
            <summary>
                Emphasized text
            </summary>
        </member>
        <member name="M:ReactWithDotNet.em.#ctor">
            <summary>
                Emphasized text
            </summary>
        </member>
        <member name="M:ReactWithDotNet.em.#ctor(ReactWithDotNet.IModifier[])">
            <summary>
                Emphasized text
            </summary>
        </member>
        <member name="M:ReactWithDotNet.em.#ctor(System.String)">
            <summary>
                Emphasized text
            </summary>
        </member>
        <member name="M:ReactWithDotNet.em.op_Implicit(System.String)~ReactWithDotNet.em">
            <summary>
                Emphasized text
            </summary>
        </member>
        <member name="M:ReactWithDotNet.em.#ctor(ReactWithDotNet.Style)">
            <summary>
                Emphasized text
            </summary>
        </member>
        <member name="T:ReactWithDotNet.b">
            <summary>
                Bold text
            </summary>
        </member>
        <member name="M:ReactWithDotNet.b.#ctor">
            <summary>
                Bold text
            </summary>
        </member>
        <member name="M:ReactWithDotNet.b.#ctor(ReactWithDotNet.IModifier[])">
            <summary>
                Bold text
            </summary>
        </member>
        <member name="M:ReactWithDotNet.b.#ctor(System.String)">
            <summary>
                Bold text
            </summary>
        </member>
        <member name="M:ReactWithDotNet.b.op_Implicit(System.String)~ReactWithDotNet.b">
            <summary>
                Bold text
            </summary>
        </member>
        <member name="M:ReactWithDotNet.b.#ctor(ReactWithDotNet.Style)">
            <summary>
                Bold text
            </summary>
        </member>
        <member name="T:ReactWithDotNet.i">
            <summary>
                Italic text
            </summary>
        </member>
        <member name="M:ReactWithDotNet.i.#ctor">
            <summary>
                Italic text
            </summary>
        </member>
        <member name="M:ReactWithDotNet.i.#ctor(ReactWithDotNet.IModifier[])">
            <summary>
                Italic text
            </summary>
        </member>
        <member name="M:ReactWithDotNet.i.#ctor(System.String)">
            <summary>
                Italic text
            </summary>
        </member>
        <member name="M:ReactWithDotNet.i.op_Implicit(System.String)~ReactWithDotNet.i">
            <summary>
                Italic text
            </summary>
        </member>
        <member name="M:ReactWithDotNet.i.#ctor(ReactWithDotNet.Style)">
            <summary>
                Italic text
            </summary>
        </member>
        <member name="T:ReactWithDotNet.u">
            <summary>
                Represents some text that is unarticulated and styled differently from normal text, such as misspelled words or proper names in Chinese text. The content inside is typically displayed with an underline.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.u.#ctor">
            <summary>
                Represents some text that is unarticulated and styled differently from normal text, such as misspelled words or proper names in Chinese text. The content inside is typically displayed with an underline.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.u.#ctor(ReactWithDotNet.IModifier[])">
            <summary>
                Represents some text that is unarticulated and styled differently from normal text, such as misspelled words or proper names in Chinese text. The content inside is typically displayed with an underline.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.u.#ctor(System.String)">
            <summary>
                Represents some text that is unarticulated and styled differently from normal text, such as misspelled words or proper names in Chinese text. The content inside is typically displayed with an underline.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.u.op_Implicit(System.String)~ReactWithDotNet.u">
            <summary>
                Represents some text that is unarticulated and styled differently from normal text, such as misspelled words or proper names in Chinese text. The content inside is typically displayed with an underline.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.u.#ctor(ReactWithDotNet.Style)">
            <summary>
                Represents some text that is unarticulated and styled differently from normal text, such as misspelled words or proper names in Chinese text. The content inside is typically displayed with an underline.
            </summary>
        </member>
        <member name="T:ReactWithDotNet.strong">
            <summary>
                Important text
            </summary>
        </member>
        <member name="M:ReactWithDotNet.strong.#ctor">
            <summary>
                Important text
            </summary>
        </member>
        <member name="M:ReactWithDotNet.strong.#ctor(ReactWithDotNet.IModifier[])">
            <summary>
                Important text
            </summary>
        </member>
        <member name="M:ReactWithDotNet.strong.#ctor(System.String)">
            <summary>
                Important text
            </summary>
        </member>
        <member name="M:ReactWithDotNet.strong.op_Implicit(System.String)~ReactWithDotNet.strong">
            <summary>
                Important text
            </summary>
        </member>
        <member name="M:ReactWithDotNet.strong.#ctor(ReactWithDotNet.Style)">
            <summary>
                Important text
            </summary>
        </member>
        <member name="T:ReactWithDotNet.section">
            <summary>
                Section in a document
            </summary>
        </member>
        <member name="M:ReactWithDotNet.section.#ctor">
            <summary>
                Section in a document
            </summary>
        </member>
        <member name="M:ReactWithDotNet.section.#ctor(ReactWithDotNet.IModifier[])">
            <summary>
                Section in a document
            </summary>
        </member>
        <member name="M:ReactWithDotNet.section.#ctor(ReactWithDotNet.Style)">
            <summary>
                Section in a document
            </summary>
        </member>
        <member name="T:ReactWithDotNet.Element">
            <summary>
                The element
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Element.children">
            <summary>
                The children
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Element.key">
            <summary>
                Gets or sets the key.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Element.Add(ReactWithDotNet.Element)">
            <summary>
                Adds the specified element.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Element.Add(System.Func{ReactWithDotNet.Element})">
            <summary>
                Invokes <paramref name="elementCreatorFunc" /> then adds return value to children.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Element.GetEnumerator">
            <summary>
                Gets the enumerator.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Element.System#Collections#IEnumerable#GetEnumerator">
            <summary>
                Gets the enumerator.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.ElementCollection.Add(System.Func{ReactWithDotNet.Element})">
            <summary>
                Invokes <paramref name="elementCreatorFunc" /> then adds return value to list.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Extensions.RemoveFromEnd(System.String,System.String)">
            <summary>
                Removes value from end of str
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Extensions.RemoveFromEnd(System.String,System.String,System.StringComparison)">
            <summary>
                Removes from end.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Extensions.RemoveFromStart(System.String,System.String)">
            <summary>
                Removes value from start of str
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Extensions.RemoveFromStart(System.String,System.String,System.StringComparison)">
            <summary>
                Removes value from start of str
            </summary>
        </member>
        <member name="T:ReactWithDotNet.FlexRow">
            <summary>
                display = "flex"
                <br />
                flexDirection  = "row"
            </summary>
        </member>
        <member name="M:ReactWithDotNet.FlexRow.#ctor(ReactWithDotNet.IModifier[])">
            <summary>
                display = "flex"
                <br />
                flexDirection  = "row"
            </summary>
        </member>
        <member name="M:ReactWithDotNet.FlexRow.#ctor">
            <summary>
                display = "flex"
                <br />
                flexDirection  = "row"
            </summary>
        </member>
        <member name="T:ReactWithDotNet.InlineFlexRow">
            <summary>
                display = "inline-flex"
                <br />
                flexDirection  = "row"
            </summary>
        </member>
        <member name="M:ReactWithDotNet.InlineFlexRow.#ctor(ReactWithDotNet.IModifier[])">
            <summary>
                display = "inline-flex"
                <br />
                flexDirection  = "row"
            </summary>
        </member>
        <member name="M:ReactWithDotNet.InlineFlexRow.#ctor">
            <summary>
                display = "inline-flex"
                <br />
                flexDirection  = "row"
            </summary>
        </member>
        <member name="T:ReactWithDotNet.FlexColumn">
            <summary>
                display = "flex"
                <br />
                flexDirection  = "column"
            </summary>
        </member>
        <member name="M:ReactWithDotNet.FlexColumn.#ctor(ReactWithDotNet.IModifier[])">
            <summary>
                display = "flex"
                <br />
                flexDirection  = "column"
            </summary>
        </member>
        <member name="M:ReactWithDotNet.FlexColumn.#ctor">
            <summary>
                display = "flex"
                <br />
                flexDirection  = "column"
            </summary>
        </member>
        <member name="T:ReactWithDotNet.InlineFlexColumn">
            <summary>
                display = "inline-flex"
                <br />
                flexDirection  = "column"
            </summary>
        </member>
        <member name="M:ReactWithDotNet.InlineFlexColumn.#ctor(ReactWithDotNet.IModifier[])">
            <summary>
                display = "inline-flex"
                <br />
                flexDirection  = "column"
            </summary>
        </member>
        <member name="M:ReactWithDotNet.InlineFlexColumn.#ctor">
            <summary>
                display = "inline-flex"
                <br />
                flexDirection  = "inline-column"
            </summary>
        </member>
        <member name="T:ReactWithDotNet.FlexRowCentered">
            <summary>
                display = "flex"
                <br />
                flexDirection  = "row"
                <br />
                justifyContent = "center"
                <br />
                alignItems     = "center"
            </summary>
        </member>
        <member name="M:ReactWithDotNet.FlexRowCentered.#ctor">
            <summary>
                display = "flex"
                <br />
                flexDirection  = "row"
                <br />
                justifyContent = "center"
                <br />
                alignItems     = "center"
            </summary>
        </member>
        <member name="M:ReactWithDotNet.FlexRowCentered.#ctor(ReactWithDotNet.IModifier[])">
            <summary>
                display = "flex"
                <br />
                flexDirection  = "row"
                <br />
                justifyContent = "center"
                <br />
                alignItems     = "center"
            </summary>
        </member>
        <member name="T:ReactWithDotNet.InlineFlexRowCentered">
            <summary>
                display = "inline-flex"
                <br />
                flexDirection  = "row"
                <br />
                justifyContent = "center"
                <br />
                alignItems     = "center"
            </summary>
        </member>
        <member name="M:ReactWithDotNet.InlineFlexRowCentered.#ctor">
            <summary>
                display = "inline-flex"
                <br />
                flexDirection  = "row"
                <br />
                justifyContent = "center"
                <br />
                alignItems     = "center"
            </summary>
        </member>
        <member name="M:ReactWithDotNet.InlineFlexRowCentered.#ctor(ReactWithDotNet.IModifier[])">
            <summary>
                display = "inline-flex"
                <br />
                flexDirection  = "row"
                <br />
                justifyContent = "center"
                <br />
                alignItems     = "center"
            </summary>
        </member>
        <member name="T:ReactWithDotNet.FlexColumnCentered">
            <summary>
                display = "flex"
                <br />
                flexDirection  = "column"
                <br />
                justifyContent = "center"
                <br />
                alignItems     = "center"
            </summary>
        </member>
        <member name="M:ReactWithDotNet.FlexColumnCentered.#ctor">
            <summary>
                display = "flex"
                <br />
                flexDirection  = "column"
                <br />
                justifyContent = "center"
                <br />
                alignItems     = "center"
            </summary>
        </member>
        <member name="M:ReactWithDotNet.FlexColumnCentered.#ctor(ReactWithDotNet.IModifier[])">
            <summary>
                display = "flex"
                <br />
                flexDirection  = "column"
                <br />
                justifyContent = "center"
                <br />
                alignItems     = "center"
            </summary>
        </member>
        <member name="T:ReactWithDotNet.InlineFlexColumnCentered">
            <summary>
                display = "inline-flex"
                <br />
                flexDirection  = "column"
                <br />
                justifyContent = "center"
                <br />
                alignItems     = "center"
            </summary>
        </member>
        <member name="M:ReactWithDotNet.InlineFlexColumnCentered.#ctor">
            <summary>
                display = "inline-flex"
                <br />
                flexDirection  = "column"
                <br />
                justifyContent = "center"
                <br />
                alignItems     = "center"
            </summary>
        </member>
        <member name="M:ReactWithDotNet.InlineFlexColumnCentered.#ctor(ReactWithDotNet.IModifier[])">
            <summary>
                display = "inline-flex"
                <br />
                flexDirection  = "column"
                <br />
                justifyContent = "center"
                <br />
                alignItems     = "center"
            </summary>
        </member>
        <member name="P:ReactWithDotNet.HtmlElement.accesskey">
            <summary>
                Provides a hint for generating a keyboard shortcut for the current element. This attribute consists of a
                space-separated list of characters. The browser should use the first one that exists on the computer keyboard
                layout.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.HtmlElement.className">
            <summary>
                Gets or sets the name of the class.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.HtmlElement.data">
            <summary>
                The data-* attribute is used to store custom data private to the page or application.
                <br />
                The data-* attribute gives us the ability to embed custom data attributes on all HTML elements.
                <br />
                The stored (custom) data can then be used in the page's JavaScript to create a more engaging user experience
                (without any Ajax calls or server-side database queries).
                <br />
                The data-* attribute consist of two parts:
                <br />
                The attribute name should not contain any uppercase letters, and must be at least one character long after the
                prefix "data-"<br />
                The attribute value can be any string<br />
                Note: Custom attributes prefixed with "data-" will be completely ignored by the user agent.<br />
            </summary>
        </member>
        <member name="P:ReactWithDotNet.HtmlElement.dir">
            <summary>
                Specifies the text direction for the content in an element
            </summary>
        </member>
        <member name="P:ReactWithDotNet.HtmlElement.innerText">
            <summary>
                'innerText' property of element.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.HtmlElement.lang">
            <summary>
                Helps define the language of an element: the language that non-editable elements are in, or the language that
                editable elements should be written in by the user. The attribute contains one "language tag" (made of
                hyphen-separated "language subtags") in the format defined in RFC 5646: Tags for Identifying Languages (also known
                as BCP 47). xml:lang has priority over it.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.HtmlElement.onClick">
            <summary>
                Gets or sets the on click.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.HtmlElement.onClickPreview">
            <summary>
                Gets or sets the on click.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.HtmlElement.onScroll">
            <summary>
                Handler <paramref name="value" /> should be in client js codes.<br />
                <br />
                Sample Usage:<br />
                <br />
                ReactWithDotNet.RegisterExternalJsObject(<paramref name="value" />, function(e){<br />
                ...<br />
                ...<br />
                });
            </summary>
        </member>
        <member name="P:ReactWithDotNet.HtmlElement.part">
            <summary>
                A space-separated list of the part names of the element. Part names allows CSS to select and style specific
                elements in a shadow tree via the ::part pseudo-element.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.HtmlElement.role">
            <summary>
                Roles define the semantic meaning of content, allowing screen readers and other tools to present and support
                interaction with an object in a way that is consistent with user expectations of that type of object.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.HtmlElement.spellcheck">
            <summary>
                An enumerated attribute defines whether the element may be checked for spelling errors. It may have the following
                values:<br />
                empty string or true, which indicates that the element should be, if possible, checked for spelling errors;<br />
                false, which indicates that the element should not be checked for spelling errors.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.HtmlElement.style">
            <summary>
                Gets the style.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.HtmlElement.Style">
            <summary>
                Imports filled values given style
            </summary>
        </member>
        <member name="P:ReactWithDotNet.HtmlElement.text">
            <summary>
                'innerText' property of element.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.HtmlElement.translate">
            <summary>
                An enumerated attribute that is used to specify whether an element's attribute values and the values of its Text
                node children are to be translated when the page is localized, or whether to leave them unchanged. It can have the
                following values:
                <br />
                empty string or yes, which indicates that the element will be translated.
                <br />
                no, which indicates that the element will not be translated.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.HtmlElement.AddClass(System.String)">
            <summary>
                Adds given cssClassName ot class attribute of html element
            </summary>
        </member>
        <member name="P:ReactWithDotNet.input.onBlur">
            <summary>
                Occurs when an element loses focus.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.input.onFocus">
            <summary>
                occurs when an element gets focus.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.input.valueBindDebounceHandler">
            <summary>
                if you want to handle when user iteraction finished see example below<br />
                component.valueBind = ()=>state.UserInfo.Name<br />
                component.valueBindDebounceTimeout = 600 // milliseconds<br />
                component.valueBindDebounceHandler = OnUserIterationFinished<br />
            </summary>
        </member>
        <member name="P:ReactWithDotNet.input.valueBindDebounceTimeout">
            <summary>
                if you want to handle when user iteraction finished see example below<br />
                component.valueBind = ()=>state.UserInfo.Name<br />
                component.valueBindDebounceTimeout = 600 // milliseconds<br />
                component.valueBindDebounceHandler = OnUserIterationFinished<br />
            </summary>
        </member>
        <member name="F:ReactWithDotNet.CssUnit.em">
            <summary>
                2|em returns like '2em'
            </summary>
        </member>
        <member name="M:ReactWithDotNet.ReactComponentBase.DispatchEvent(System.Linq.Expressions.Expression{System.Func{System.Action}})">
            <summary>
                Sample event declaration <br />
                [ReactCustomEvent] public Action OnUserChanged { get; set; }
                <br />
                <br />
                Sample event dispatching <br />
                DispatchEvent(()=> OnUserChanged);
            </summary>
        </member>
        <member name="M:ReactWithDotNet.ReactComponentBase.DispatchEvent``1(System.Linq.Expressions.Expression{System.Func{System.Action{``0}}},``0)">
            <summary>
                Sample event decleration <br />
                [ReactCustomEvent] public Action&lt;UserInfo&gt; OnUserChanged { get; set; }
                <br />
                <br />
                Sample event dispatching <br />
                DispatchEvent(()=> OnUserChanged, state.SelectedUserInfo);
            </summary>
        </member>
        <member name="M:ReactWithDotNet.ReactComponentBase.DispatchEvent``2(System.Linq.Expressions.Expression{System.Func{System.Action{``0,``1}}},``0,``1)">
            <summary>
                Sample event decleration <br />
                [ReactCustomEvent] public Action&lt;UserInfo,OrderInfo&gt; OnUserChanged { get; set; }
                <br />
                <br />
                Sample event dispatching <br />
                DispatchEvent(()=> OnUserChanged, state.SelectedUserInfo, state.SelectedOrderInfo);
            </summary>
        </member>
        <member name="M:ReactWithDotNet.ReactComponentBase.DispatchEvent``3(System.Linq.Expressions.Expression{System.Func{System.Action{``0,``1}}},``0,``1,``2)">
            <summary>
                Sample event declaration <br />
                [ReactCustomEvent] public Action&lt;UserInfo,OrderInfo,CommissionInfo&gt; OnUserChanged { get; set; }
                <br />
                <br />
                Sample event dispatching <br />
                DispatchEvent(()=> OnUserChanged, state.SelectedUserInfo, state.SelectedOrderInfo, state.SelectedCommissionInfo);
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Style.alignItems">
            <summary>
                |˂-?-˃| center flex-start flex-end stretch baseline
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Style.boxSizing">
            <summary>
                Allows us to include the padding and border in an element's total width and height.
            </summary>
        </member>
        <member name="M:ReactWithDotNet.Style.op_Addition(ReactWithDotNet.Style,ReactWithDotNet.StyleModifier)">
            <summary>
                Add given <paramref name="styleModifier" /> to <paramref name="style" />
                <br />
                if <paramref name="style" /> is null then returns null.
            </summary>
        </member>
        <member name="T:ReactWithDotNet.MediaQuery">
            <summary>
                Example:
                <br />
                new MediaQuery("only screen and (max-width: 600px)", new Style { width:"5px" }
            </summary>
        </member>
        <member name="M:ReactWithDotNet.MediaQuery.#ctor(System.String,ReactWithDotNet.Style)">
            <summary>
                Example:
                <br />
                new MediaQuery("only screen and (max-width: 600px)", new Style { width:"5px" }
            </summary>
        </member>
        <member name="M:ReactWithDotNet.svg.Width(System.String)">
            <summary>
                svg.width = <paramref name="width" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.svg.Width(System.Double)">
            <summary>
                svg.width = <paramref name="width" /> + 'px'
            </summary>
        </member>
        <member name="M:ReactWithDotNet.svg.WidthHeight(System.String)">
            <summary>
                svg.width = <paramref name="widthAndHeight" />
            <br/>
                svg.height = <paramref name="widthAndHeight" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.svg.WidthHeight(System.Double)">
            <summary>
                svg.width = <paramref name="widthAndHeight" /> + 'px'
            <br/>
                svg.height = <paramref name="widthAndHeight" /> + 'px'
            </summary>
        </member>
        <member name="M:ReactWithDotNet.svg.Height(System.String)">
            <summary>
                svg.height = <paramref name="height" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.svg.Height(System.Double)">
            <summary>
                svg.height = <paramref name="height" /> + 'px'
            </summary>
        </member>
        <member name="M:ReactWithDotNet.svg.Fill(System.String)">
            <summary>
                svg.fill = <paramref name="color" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.svg.ViewBox(System.String)">
            <summary>
                svg.viewBox = <paramref name="viewBox" />
            </summary>
        </member>
        <member name="M:ReactWithDotNet.svg.ViewBox(System.Double,System.Double,System.Double,System.Double)">
            <summary>
                svg.viewBox = '<paramref name="minX" /> <paramref name="minY" /> <paramref name="width" /> <paramref name="height" />'
            </summary>
        </member>
        <member name="M:ReactWithDotNet.g.ClipPath(System.String)">
            <summary>
                g.clipPath = <paramref name="value" />
            </summary>
        </member>
        <member name="P:ReactWithDotNet.rect.rx">
            <summary>
            The horizontal corner radius of the rect
            <br/>
            Default value: auto
            </summary>
        </member>
        <member name="P:ReactWithDotNet.rect.ry">
            <summary>
            The vertical corner radius of the rect
            <br/>
            Default value: auto
            </summary>
        </member>
        <member name="P:ReactWithDotNet.rect.x">
            <summary>
            The x coordinate of the rect
            </summary>
        </member>
        <member name="P:ReactWithDotNet.rect.y">
            <summary>
            The y coordinate of the rect
            </summary>
        </member>
        <member name="P:ReactWithDotNet.MouseEvent.FirstNotEmptyId">
            <summary>
                this is the id of first element id which is 'has id value'
            </summary>
        </member>
        <member name="M:ReactWithDotNet.table.CellSpacing(System.Nullable{System.Double})">
            <summary>
                table.cellSpacing = <paramref name="value" />
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MonacoEditorReact.Editor.valueBindDebounceHandler">
            <summary>
                if you want to handle when user iteraction finished see example below<br />
                component.valueBind = ()=>state.UserInfo.Name<br />
                component.valueBindDebounceTimeout = 600 // milliseconds<br />
                component.valueBindDebounceHandler = OnUserIterationFinished<br />
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MonacoEditorReact.Editor.valueBindDebounceTimeout">
            <summary>
                if you want to handle when user iteraction finished see example below<br />
                component.valueBind = ()=>state.UserInfo.Name<br />
                component.valueBindDebounceTimeout = 600 // milliseconds<br />
                component.valueBindDebounceHandler = OnUserIterationFinished<br />
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MonacoEditorReact.Editor.options">
            <summary>
            https://microsoft.github.io/monaco-editor/typedoc/variables/editor.EditorOptions.html
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Autocomplete.clearIcon">
            <summary>
                Props applied to the [`Chip`](/material-ui/api/chip/) element.
            </summary>
            <summary>
                The icon to display in place of the default clear icon.
                <br/>
                @default &lt;ClearIcon fontSize="small" /&gt;
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Autocomplete.clearText">
            <summary>
                Override the default text for the *clear* icon button.
                <br/>
                <br/>
                <br/>
                For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).
                <br/>
                @default 'Clear'
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Autocomplete.closeText">
            <summary>
                Override the default text for the *close popup* icon button.
                <br/>
                <br/>
                <br/>
                For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).
                <br/>
                @default 'Close'
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Autocomplete.componentsProps">
            <summary>
                The props used for each slot inside.
                <br/>
                @default {}
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Autocomplete.disabled">
            <summary>
                If `true`, the component is disabled.
                <br/>
                @default false
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Autocomplete.disablePortal">
            <summary>
                If `true`, the `Popper` content will be under the DOM hierarchy of the parent component.
                <br/>
                @default false
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Autocomplete.forcePopupIcon">
            <summary>
                Force the visibility display of the popup icon.
                <br/>
                @default 'auto'
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Autocomplete.fullWidth">
            <summary>
                If `true`, the input will take up the full width of its container.
                <br/>
                @default false
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Autocomplete.getLimitTagsText">
            <summary>
                The label to display when the tags are truncated (`limitTags`).
                <br/>
                <br/>
                <br/>
                @param {number} more The number of truncated tags.
                <br/>
                @returns {ReactNode}
                <br/>
                @default (more) =&gt; `+${more}`
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Autocomplete.loading">
            <summary>
                The component used to render the listbox.
                <br/>
                @default 'ul'
            </summary>
            <summary>
                Props applied to the Listbox element.
            </summary>
            <summary>
                If `true`, the component is in a loading state.
                <br/>
                This shows the `loadingText` in place of suggestions (only if there are no suggestions to show, e.g. `options` are empty).
                <br/>
                @default false
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Autocomplete.loadingText">
            <summary>
                Text to display when in a loading state.
                <br/>
                <br/>
                <br/>
                For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).
                <br/>
                @default 'Loading…'
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Autocomplete.limitTags">
            <summary>
                The maximum number of tags that will be visible when not focused.
                <br/>
                Set `-1` to disable the limit.
                <br/>
                @default -1
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Autocomplete.noOptionsText">
            <summary>
                Text to display when there are no options.
                <br/>
                <br/>
                <br/>
                For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).
                <br/>
                @default 'No options'
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Autocomplete.openText">
            <summary>
                Override the default text for the *open popup* icon button.
                <br/>
                <br/>
                <br/>
                For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).
                <br/>
                @default 'Open'
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Autocomplete.popupIcon">
            <summary>
                The component used to render the body of the popup.
                <br/>
                @default Paper
            </summary>
            <summary>
                The component used to position the popup.
                <br/>
                @default Popper
            </summary>
            <summary>
                The icon to display in place of the default popup icon.
                <br/>
                @default &lt;ArrowDropDownIcon /&gt;
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Autocomplete.readOnly">
            <summary>
                If `true`, the component becomes readonly. It is also supported for multiple tags where the tag cannot be deleted.
                <br/>
                @default false
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Autocomplete.renderGroup">
            <summary>
                Render the group.
                <br/>
                <br/>
                <br/>
                @param {AutocompleteRenderGroupParams} params The group to render.
                <br/>
                @returns {ReactNode}
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Autocomplete.renderInput">
            <summary>
                Render the input.
                <br/>
                <br/>
                <br/>
                @param {object} params
                <br/>
                @returns {ReactNode}
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Autocomplete.renderOption">
            <summary>
                Render the option, use `getOptionLabel` by default.
                <br/>
                <br/>
                <br/>
                @param {object} props The props to apply on the li element.
                <br/>
                @param {T} option The option to render.
                <br/>
                @param {object} state The state of each option.
                <br/>
                @param {object} ownerState The state of the Autocomplete component.
                <br/>
                @returns {ReactNode}
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Autocomplete.renderTags">
            <summary>
                Render the selected value.
                <br/>
                <br/>
                <br/>
                @param {T[]} value The `value` provided to the component.
                <br/>
                @param {function} getTagProps A tag props getter.
                <br/>
                @param {object} ownerState The state of the Autocomplete component.
                <br/>
                @returns {ReactNode}
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Autocomplete.size">
            <summary>
                The size of the component.
                <br/>
                @default 'medium'
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Autocomplete.slotProps">
            <summary>
                The props used for each slot inside.
                <br/>
                @default {}
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Autocomplete.sx">
            <summary>
                The system prop that allows defining system overrides as well as additional CSS styles.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.ButtonBase.centerRipple">
            <summary>
                If `true`, the ripples are centered.
                <br/>
                They won't start at the cursor interaction position.
                <br/>
                @default false
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.ButtonBase.classes">
            <summary>
                Override or extend the styles applied to the component.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.ButtonBase.disabled">
            <summary>
                If `true`, the component is disabled.
                <br/>
                @default false
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.ButtonBase.disableRipple">
            <summary>
                If `true`, the ripple effect is disabled.
                <br/>
                <br/>
                <br/>
                ⚠️ Without a ripple there is no styling for :focus-visible by default. Be sure
                <br/>
                to highlight the element by applying separate styles with the `.Mui-focusVisible` class.
                <br/>
                @default false
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.ButtonBase.disableTouchRipple">
            <summary>
                If `true`, the touch ripple effect is disabled.
                <br/>
                @default false
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.ButtonBase.focusRipple">
            <summary>
                If `true`, the base button will have a keyboard focus ripple.
                <br/>
                @default false
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.ButtonBase.focusVisibleClassName">
            <summary>
                This prop can help identify which element has keyboard focus.
                <br/>
                The class name will be applied when the element gains the focus through keyboard interaction.
                <br/>
                It's a polyfill for the [CSS :focus-visible selector](https://drafts.csswg.org/selectors-4/#the-focus-visible-pseudo).
                <br/>
                The rationale for using this feature [is explained here](https://github.com/WICG/focus-visible/blob/HEAD/explainer.md).
                <br/>
                A [polyfill can be used](https://github.com/WICG/focus-visible) to apply a `focus-visible` class to other components
                <br/>
                if needed.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.ButtonBase.sx">
            <summary>
                The system prop that allows defining system overrides as well as additional CSS styles.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.ButtonBase.TouchRippleProps">
            <summary>
                Props applied to the `TouchRipple` element.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Card.raised">
            <summary>
                If `true`, the card will use raised styling.
                <br/>
                @default false
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.CardActions.classes">
            <summary>
                Override or extend the styles applied to the component.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.CardActions.sx">
            <summary>
                The system prop that allows defining system overrides as well as additional CSS styles.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.CardActions.disableSpacing">
            <summary>
                If `true`, the actions do not have additional margin.
                <br/>
                @default false
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.CardContent.classes">
            <summary>
                Override or extend the styles applied to the component.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.CardContent.sx">
            <summary>
                The system prop that allows defining system overrides as well as additional CSS styles.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.CardMedia.classes">
            <summary>
                Override or extend the styles applied to the component.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.CardMedia.image">
            <summary>
                Image to be displayed as a background image.
                <br/>
                Either `image` or `src` prop must be specified.
                <br/>
                Note that caller must specify height otherwise the image will not be visible.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.CardMedia.src">
            <summary>
                An alias for `image` property.
                <br/>
                Available only with media components.
                <br/>
                Media components: `video`, `audio`, `picture`, `iframe`, `img`.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.CardMedia.sx">
            <summary>
                The system prop that allows defining system overrides as well as additional CSS styles.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.CircularProgress.color">
            <summary>
                The color of the component.
                <br/>
                It supports both default and custom theme colors, which can be added as shown in the
                <br/>
                [palette customization guide](https://mui.com/material-ui/customization/palette/#adding-new-colors).
                <br/>
                @default 'primary'
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.CircularProgress.disableShrink">
            <summary>
                If `true`, the shrink animation is disabled.
                <br/>
                This only works if variant is `indeterminate`.
                <br/>
                @default false
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.CircularProgress.size">
            <summary>
                The size of the component.
                <br/>
                If using a number, the pixel unit is assumed.
                <br/>
                If using a string, you need to provide the CSS unit, e.g '3rem'.
                <br/>
                @default 40
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.CircularProgress.thickness">
            <summary>
                The thickness of the circle.
                <br/>
                @default 3.6
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.CircularProgress.value">
            <summary>
                The value of the progress indicator for the determinate variant.
                <br/>
                Value between 0 and 100.
                <br/>
                @default 0
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.CircularProgress.variant">
            <summary>
                The variant to use.
                <br/>
                Use indeterminate when there is no progress value.
                <br/>
                @default 'indeterminate'
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Divider.absolute">
            <summary>
                Absolutely position the element.
                <br/>
                @default false
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Divider.classes">
            <summary>
                Override or extend the styles applied to the component.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Divider.flexItem">
            <summary>
                If `true`, a vertical divider will have the correct height when used in flex container.
                <br/>
                (By default, a vertical divider will have a calculated height of `0px` if it is the child of a flex container.)
                <br/>
                @default false
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Divider.light">
            <summary>
                If `true`, the divider will have a lighter color.
                <br/>
                @default false
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Divider.orientation">
            <summary>
                The component orientation.
                <br/>
                @default 'horizontal'
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Divider.sx">
            <summary>
                The system prop that allows defining system overrides as well as additional CSS styles.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Divider.textAlign">
            <summary>
                The text alignment.
                <br/>
                @default 'center'
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Divider.variant">
            <summary>
                The variant to use.
                <br/>
                @default 'fullWidth'
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.IconButton.color">
            <summary>
                The color of the component.
                <br/>
                It supports both default and custom theme colors, which can be added as shown in the
                <br/>
                [palette customization guide](https://mui.com/material-ui/customization/palette/#adding-new-colors).
                <br/>
                @default 'default'
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.IconButton.disableFocusRipple">
            <summary>
                If `true`, the  keyboard focus ripple is disabled.
                <br/>
                @default false
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.IconButton.edge">
            <summary>
                If given, uses a negative margin to counteract the padding on one
                <br/>
                side (this is often helpful for aligning the left or right
                <br/>
                side of the icon with content above or below, without ruining the border
                <br/>
                size and shape).
                <br/>
                @default false
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.IconButton.size">
            <summary>
                The size of the component.
                <br/>
                `small` is equivalent to the dense button styling.
                <br/>
                @default 'medium'
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Switch.color">
            <summary>
                The color of the component.
                <br/>
                It supports both default and custom theme colors, which can be added as shown in the
                <br/>
                [palette customization guide](https://mui.com/material-ui/customization/palette/#adding-new-colors).
                <br/>
                @default 'primary'
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Switch.size">
            <summary>
                The size of the component.
                <br/>
                `small` is equivalent to the dense switch styling.
                <br/>
                @default 'medium'
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.TextField.valueBindDebounceHandler">
            <summary>
                if you want to handle when user iteraction finished see example below<br />
                component.valueBind = ()=>state.UserInfo.Name<br />
                component.valueBindDebounceTimeout = 600 // milliseconds<br />
                component.valueBindDebounceHandler = OnUserIterationFinished<br />
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.TextField.valueBindDebounceTimeout">
            <summary>
                if you want to handle when user iteraction finished see example below<br />
                component.valueBind = ()=>state.UserInfo.Name<br />
                component.valueBindDebounceTimeout = 600 // milliseconds<br />
                component.valueBindDebounceHandler = OnUserIterationFinished<br />
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.TextField.autoComplete">
            <summary>
                This prop helps users to fill forms faster, especially on mobile devices.
                <br/>
                The name can be confusing, as it's more like an autofill.
                <br/>
                You can learn more about it [following the specification](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill).
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.TextField.autoFocus">
            <summary>
                If `true`, the `input` element is focused during the first mount.
                <br/>
                @default false
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.TextField.classes">
            <summary>
                Override or extend the styles applied to the component.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.TextField.color">
            <summary>
                The color of the component.
                <br/>
                It supports both default and custom theme colors, which can be added as shown in the
                <br/>
                [palette customization guide](https://mui.com/material-ui/customization/palette/#adding-new-colors).
                <br/>
                @default 'primary'
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.TextField.defaultValue">
            <summary>
                The default value. Use when the component is not controlled.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.TextField.disabled">
            <summary>
                If `true`, the component is disabled.
                <br/>
                @default false
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.TextField.error">
            <summary>
                If `true`, the label is displayed in an error state.
                <br/>
                @default false
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.TextField.FormHelperTextProps">
            <summary>
                Props applied to the [`FormHelperText`](/material-ui/api/form-helper-text/) element.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.TextField.fullWidth">
            <summary>
                If `true`, the input will take up the full width of its container.
                <br/>
                @default false
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.TextField.helperText">
            <summary>
                The helper text content.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.TextField.id">
            <summary>
                The id of the `input` element.
                <br/>
                Use this prop to make `label` and `helperText` accessible for screen readers.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.TextField.InputLabelProps">
            <summary>
                Props applied to the [`InputLabel`](/material-ui/api/input-label/) element.
                <br/>
                Pointer events like `onClick` are enabled if and only if `shrink` is `true`.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.TextField.inputProps">
            <summary>
                [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.TextField.label">
            <summary>
                The label content.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.TextField.multiline">
            <summary>
                If `true`, a `textarea` element is rendered instead of an input.
                <br/>
                @default false
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.TextField.name">
            <summary>
                Name attribute of the `input` element.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.TextField.placeholder">
            <summary>
                The short hint displayed in the `input` before the user enters a value.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.TextField.required">
            <summary>
                If `true`, the label is displayed as required and the `input` element is required.
                <br/>
                @default false
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.TextField.rows">
            <summary>
                Number of rows to display when multiline option is set to true.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.TextField.maxRows">
            <summary>
                Maximum number of rows to display when multiline option is set to true.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.TextField.minRows">
            <summary>
                Minimum number of rows to display when multiline option is set to true.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.TextField.select">
            <summary>
                Render a [`Select`](/material-ui/api/select/) element while passing the Input element to `Select` as `input` parameter.
                <br/>
                If this option is set you must pass the options of the select as children.
                <br/>
                @default false
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.TextField.SelectProps">
            <summary>
                Props applied to the [`Select`](/material-ui/api/select/) element.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.TextField.size">
            <summary>
                The size of the component.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.TextField.sx">
            <summary>
                The system prop that allows defining system overrides as well as additional CSS styles.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.TextField.type">
            <summary>
                Type of the `input` element. It should be [a valid HTML5 input type](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_%3Cinput%3E_types).
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.TextField.value">
            <summary>
                The value of the `input` element, required for a controlled component.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Paper.classes">
            <summary>
                Override or extend the styles applied to the component.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Paper.elevation">
            <summary>
                Shadow depth, corresponds to `dp` in the spec.
                <br/>
                It accepts values between 0 and 24 inclusive.
                <br/>
                @default 1
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Paper.square">
            <summary>
                If `true`, rounded corners are disabled.
                <br/>
                @default false
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Paper.sx">
            <summary>
                The system prop that allows defining system overrides as well as additional CSS styles.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Paper.variant">
            <summary>
                The variant to use.
                <br/>
                @default 'elevation'
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Slider.onChangeCommitted">
            <summary>
            Callback function that is fired when the mouseup is triggered.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Slider.onChange">
            <summary>
            Callback function that is fired when the slider's value changed.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Slider.classes">
            <summary>
                Override or extend the styles applied to the component.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Slider.valueBindDebounceHandler">
            <summary>
                if you want to handle when user iteraction finished see example below<br />
                component.valueBind = ()=>state.UserInfo.Name<br />
                component.valueBindDebounceTimeout = 600 // milliseconds<br />
                component.valueBindDebounceHandler = OnUserIterationFinished<br />
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Slider.valueBindDebounceTimeout">
            <summary>
                if you want to handle when user iteraction finished see example below<br />
                component.valueBind = ()=>state.UserInfo.Name<br />
                component.valueBindDebounceTimeout = 600 // milliseconds<br />
                component.valueBindDebounceHandler = OnUserIterationFinished<br />
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.SwitchBase.checked">
            <summary>
                If `true`, the component is checked.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.SwitchBase.defaultChecked">
            <summary>
                The default checked state. Use when the component is not controlled.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.SwitchBase.disableFocusRipple">
            <summary>
                If `true`, the  keyboard focus ripple is disabled.
                <br/>
                @default false
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.SwitchBase.edge">
            <summary>
                If given, uses a negative margin to counteract the padding on one
                <br/>
                side (this is often helpful for aligning the left or right
                <br/>
                side of the icon with content above or below, without ruining the border
                <br/>
                size and shape).
                <br/>
                @default false
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.SwitchBase.id">
            <summary>
                The id of the `input` element.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.SwitchBase.inputProps">
            <summary>
                [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.SwitchBase.name">
            <summary>
                Pass a ref to the `input` element.
            </summary>
            <summary>
                Name attribute of the `input` element.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.SwitchBase.readOnly">
            <summary>
                Callback fired when the state is changed.
                <br/>
                <br/>
                <br/>
                @param {React.ChangeEvent&lt;HTMLInputElement&gt;} event The event source of the callback.
                <br/>
                You can pull out the new value by accessing `event.target.value` (string).
                <br/>
                You can pull out the new checked state by accessing `event.target.checked` (boolean).
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.SwitchBase.required">
            <summary>
                If `true`, the `input` element is required.
                <br/>
                @default false
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.SwitchBase.value">
            <summary>
                The value of the component. The DOM API casts this to a string.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Tooltip.arrow">
            <summary>
                If `true`, adds an arrow to the tooltip.
                <br/>
                @default false
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Tooltip.classes">
            <summary>
                Override or extend the styles applied to the component.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Tooltip.components">
            <summary>
                The components used for each slot inside.
                <br/>
                <br/>
                <br/>
                This prop is an alias for the `slots` prop.
                <br/>
                It's recommended to use the `slots` prop instead.
                <br/>
                <br/>
                <br/>
                @default {}
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Tooltip.componentsProps">
            <summary>
                The extra props for the slot components.
                <br/>
                You can override the existing props or add new ones.
                <br/>
                <br/>
                <br/>
                This prop is an alias for the `slotProps` prop.
                <br/>
                It's recommended to use the `slotProps` prop instead, as `componentsProps` will be deprecated in the future.
                <br/>
                <br/>
                <br/>
                @default {}
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Tooltip.describeChild">
            <summary>
                Set to `true` if the `title` acts as an accessible description.
                <br/>
                By default the `title` acts as an accessible label for the child.
                <br/>
                @default false
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Tooltip.disableFocusListener">
            <summary>
                Do not respond to focus-visible events.
                <br/>
                @default false
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Tooltip.disableHoverListener">
            <summary>
                Do not respond to hover events.
                <br/>
                @default false
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Tooltip.disableInteractive">
            <summary>
                Makes a tooltip not interactive, i.e. it will close when the user
                <br/>
                hovers over the tooltip before the `leaveDelay` is expired.
                <br/>
                @default false
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Tooltip.disableTouchListener">
            <summary>
                Do not respond to long press touch events.
                <br/>
                @default false
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Tooltip.enterDelay">
            <summary>
                The number of milliseconds to wait before showing the tooltip.
                <br/>
                This prop won't impact the enter touch delay (`enterTouchDelay`).
                <br/>
                @default 100
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Tooltip.enterNextDelay">
            <summary>
                The number of milliseconds to wait before showing the tooltip when one was already recently opened.
                <br/>
                @default 0
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Tooltip.enterTouchDelay">
            <summary>
                The number of milliseconds a user must touch the element before showing the tooltip.
                <br/>
                @default 700
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Tooltip.followCursor">
            <summary>
                If `true`, the tooltip follow the cursor over the wrapped element.
                <br/>
                @default false
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Tooltip.id">
            <summary>
                This prop is used to help implement the accessibility logic.
                <br/>
                If you don't provide this prop. It falls back to a randomly generated id.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Tooltip.leaveDelay">
            <summary>
                The number of milliseconds to wait before hiding the tooltip.
                <br/>
                This prop won't impact the leave touch delay (`leaveTouchDelay`).
                <br/>
                @default 0
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Tooltip.leaveTouchDelay">
            <summary>
                The number of milliseconds after the user stops touching an element before hiding the tooltip.
                <br/>
                @default 1500
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Tooltip.open">
            <summary>
                Callback fired when the component requests to be closed.
                <br/>
                <br/>
                <br/>
                @param {React.SyntheticEvent} event The event source of the callback.
            </summary>
            <summary>
                Callback fired when the component requests to be open.
                <br/>
                <br/>
                <br/>
                @param {React.SyntheticEvent} event The event source of the callback.
            </summary>
            <summary>
                If `true`, the component is shown.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Tooltip.placement">
            <summary>
                Tooltip placement.
                <br/>
                @default 'bottom'
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Tooltip.PopperProps">
            <summary>
                Props applied to the [`Popper`](/material-ui/api/popper/) element.
                <br/>
                @default {}
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Tooltip.slotProps">
            <summary>
                The extra props for the slot components.
                <br/>
                You can override the existing props or add new ones.
                <br/>
                <br/>
                <br/>
                This prop is an alias for the `componentsProps` prop, which will be deprecated in the future.
                <br/>
                <br/>
                <br/>
                @default {}
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Tooltip.slots">
            <summary>
                The components used for each slot inside.
                <br/>
                <br/>
                <br/>
                This prop is an alias for the `components` prop, which will be deprecated in the future.
                <br/>
                <br/>
                <br/>
                @default {}
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Tooltip.sx">
            <summary>
                The system prop that allows defining system overrides as well as additional CSS styles.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Tooltip.title">
            <summary>
                Tooltip title. Zero-length titles string, undefined, null and false are never displayed.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Typography.align">
            <summary>
                Set the text-align on the component.
                <br/>
                @default 'inherit'
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Typography.classes">
            <summary>
                Override or extend the styles applied to the component.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Typography.gutterBottom">
            <summary>
                If `true`, the text will have a bottom margin.
                <br/>
                @default false
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Typography.noWrap">
            <summary>
                If `true`, the text will not wrap, but instead will truncate with a text overflow ellipsis.
                <br/>
                <br/>
                <br/>
                Note that text overflow can only happen with block or inline-block level elements
                <br/>
                (the element needs to have a width in order to overflow).
                <br/>
                @default false
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Typography.paragraph">
            <summary>
                If `true`, the element will be a paragraph element.
                <br/>
                @default false
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Typography.sx">
            <summary>
                The system prop that allows defining system overrides as well as additional CSS styles.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Typography.variant">
            <summary>
                Applies the theme typography styles.
                <br/>
                @default 'body1'
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.MUI.Material.Typography.variantMapping">
            <summary>
                The component maps the variant prop to a range of different HTML element types.
                <br/>
                For instance, subtitle1 to `&lt;h6&gt;`.
                <br/>
                If you wish to change that mapping, you can provide your own.
                <br/>
                Alternatively, you can use the `component` prop.
                <br/>
                @default {
                <br/>
                h1: 'h1',
                <br/>
                h2: 'h2',
                <br/>
                h3: 'h3',
                <br/>
                h4: 'h4',
                <br/>
                h5: 'h5',
                <br/>
                h6: 'h6',
                <br/>
                subtitle1: 'h6',
                <br/>
                subtitle2: 'h6',
                <br/>
                body1: 'p',
                <br/>
                body2: 'p',
                <br/>
                inherit: 'p',
                <br/>
                }
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.AutoComplete`1.delay">
            <summary>
            Delay between keystrokes to wait before sending a query.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.AutoComplete`1.suggestions">
            <summary>
                An array of suggestions to display.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.AutoComplete`1.onChange">
            <summary>
                Callback to invoke when autocomplete value changes.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.AutoComplete`1.completeMethod">
            <summary>
                Callback to invoke to search for suggestions.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.AutoComplete`1.field">
            <summary>
                Field of a suggested object to resolve and display.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.AutoComplete`1.forceSelection">
            <summary>
                When present, autocomplete clears the manual input if it does not match of the suggestions to force only accepting
                values from the suggestions.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.AutoComplete`1.dropdown">
            <summary>
            Displays a button next to the input field when enabled.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.Avatar.icon">
            <summary>
                Defines the icon to display.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.Avatar.image">
            <summary>
                Defines the image to display.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.Avatar.imageAlt">
            <summary>
                It specifies an alternate text for an image, if the image cannot be displayed.
                <br/>
                @defaultValue avatar
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.Avatar.imageFallback">
            <summary>
                Defines a fallback image or URL if the main image fails to load. If "default" will fallback to label then icon.
                <br/>
                @defaultValue default
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.Avatar.label">
            <summary>
                Defines the text to display.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.Avatar.shape">
            <summary>
                Shape of the element.
                <br/>
                @defaultValue square
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.Avatar.size">
            <summary>
                Size of the element.
                <br/>
                @defaultValue normal
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.Avatar.template">
            <summary>
                Template of the content.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.BlockUI.blocked">
            <summary>
            Controls the blocked state.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.Button.label">
            <summary>
                Text of the button.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.Button.iconPos">
            <summary>
            Position of the icon, valid values are "left", "right", "top" and "bottom".
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.Button.loading">
             <summary>
            Display loading icon of the button
             </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.Button.loadingIcon">
            <summary>
            Name of the loading icon or JSX.Element for loading icon.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.Dialog.visible">
            <summary>
            Specifies the visibility of the dialog.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.Dialog.modal">
            <summary>
            Defines if background should be blocked when dialog is displayed.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.Dialog.footer">
            <summary>
            Footer content of the dialog.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.Dialog.header">
            <summary>
            Title content of the dialog.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.Dialog.closable">
            <summary>
            Adds a close icon to the header to hide the dialog.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.Dialog.onShow">
            <summary>
            Callback to invoke when dialog is showed.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.Dialog.onHide">
            <summary>
            Callback to invoke when dialog is hidden (Required).
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.Checkbox.value">
            <summary>
            Value of the checkbox.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.Checkbox.checked">
            <summary>
               Specifies whether a checkbox should be checked or not.
                <para>default: false</para>
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.Checkbox.disabled">
            <summary>
            When present, it specifies that the element value cannot be altered.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.Checkbox.onChange">
            <summary>
            Callback to invoke on value change
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.Dropdown.filterBy">
            <summary>
            When filtering is enabled, filterBy decides which field or fields (comma separated) to search against.
            <para>Default: label</para>
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.Dropdown.showClear">
            <summary>
            When enabled, a clear icon is displayed to clear the value.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.Dropdown.filter">
            <summary>
            When specified, displays an input field to filter the items on keyup.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.InputMask.mask">
            <summary>
                Mask pattern.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.InputMask.placeholder">
            <summary>
                Advisory information to display on input.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.InputMask.maxlength">
            <summary>
                Maximum number of character allows in the input field.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.InputSwitch.checked">
            <summary>
                Specifies whether a inputswitch should be checked or not.
                <para>default: false</para>
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.InputSwitch.disabled">
            <summary>
                When present, it specifies that the component should be disabled.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.InputSwitch.onChange">
            <summary>
                Callback to invoke on value change
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.InputText.valueBindDebounceHandler">
            <summary>
            if you want to handle when user iteraction finished see example below<br/>
            component.valueBind = ()=>state.UserInfo.Name<br/>
            component.valueBindDebounceTimeout = 600 // milliseconds<br/>
            component.valueBindDebounceHandler = OnUserIterationFinished<br/>
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.InputText.valueBindDebounceTimeout">
            <summary>
            if you want to handle when user iteraction finished see example below<br/>
            component.valueBind = ()=>state.UserInfo.Name<br/>
            component.valueBindDebounceTimeout = 600 // milliseconds<br/>
            component.valueBindDebounceHandler = OnUserIterationFinished<br/>
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.InputText.keyfilter">
            <summary>
            Format definition of the keys to block.
            <para>Default: null</para>
            <para>Type: string/regex</para>
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.InputTextarea.autoResize">
             <summary>
            When present, height of textarea changes as being typed.
             <para>Default: false</para>
             </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.ListBoxSingleSelection`1.filter">
            <summary>
                When specified, displays a filter input at header.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.ListBoxSingleSelection`1.filterPlaceholder">
            <summary>
            Placeholder text to show when filter input is empty.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.ListBoxSingleSelection`1.listStyle">
            <summary>
                Inline style of inner list element.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.ListBoxSingleSelection`1.optionLabel">
            <summary>
                Name of the label field of an option when an arbitrary objects instead of SelectItems are used as options.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.ListBoxSingleSelection`1.options">
            <summary>
                An array of objects to display as the available options.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.ListBoxSingleSelection`1.optionValue">
            <summary>
                Name of the value field of an option when arbitrary objects are used as options instead of SelectItems.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.ListBoxSingleSelection`1.value">
            <summary>
                Selected value to display.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.Message.text">
            <summary>
                Text of the message.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.Message.severity">
            <summary>
            Severity level of the message.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.Panel.collapsed">
            <summary>
                	Defines the initial state of panel content, supports one or two-way binding as well.
                <para>default: false</para>
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.Panel.toggleable">
            <summary>
                Defines if content of panel can be expanded and collapsed.
                <para>default: false</para>
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.Panel.header">
            <summary>
            Custom header template of the panel.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.Panel.headerTemplate">
            <summary>
               Header template of the panel to customize more.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.Panel.onToggle">
            <summary>
                Callback to invoke when a tab gets expanded.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.ProgressSpinner.strokeWidth">
            <summary>
                Width of the circle stroke.
                <para>default: 2</para>
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.ProgressSpinner.fill">
            <summary>
               Color for the background of the circle.
                <para>default: null</para>
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.ProgressSpinner.animationDuration">
            <summary>
                Duration of the rotate animation.
                <para>default: 2s</para>
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.RadioButton.value">
            <summary>
            Value of the radiobutton.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.RadioButton.checked">
            <summary>
                Specifies whether a radiobutton should be checked or not.
                <para>default: false</para>
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.RadioButton.disabled">
            <summary>
            When present, it specifies that the element value cannot be altered.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.RadioButton.onChange">
            <summary>
            Callback to invoke on radio button click.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.Divider.layout">
            <summary>
                Specifies the orientation, valid values are "horizontal" and "vertical".
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.Divider.align">
            <summary>
                Alignment of the content, options are "left", "center", "right" for horizontal layout and "top", "center", "bottom" for vertical.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.Divider.type">
            <summary>
            Border style type, default is "solid" and other options are "dashed" and "dotted".
            </summary>
        </member>
        <member name="T:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.ScrollPanel">
            <summary>
                ScrollPanel is defined using dimensions for the scrollable viewport.
            </summary>
        </member>
        <member name="T:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.Slider">
            <summary>
                Slider is a component to provide input using dragging of a handle.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.Slider.value">
            <summary>
                Value of the component.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.Slider.valueBind">
            <summary>
                Value of the component.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.Slider.min">
            <summary>
                Mininum boundary value.
                <para>Default: 0</para>
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.Slider.max">
            <summary>
                Maximum boundary value.
                <para>Default: 100</para>
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.Slider.step">
            <summary>
                Step factor to increment/decrement the value.
                <para>Default: 1</para>
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.Slider.orientation">
            <summary>
                Orientation of the slider, valid values are horizontal and vertical.
                <para>Default: horizontal</para>
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.Slider.onChange">
            <summary>
            Callback to invoke on value change via slide.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.Slider.onSlideEnd">
            <summary>
            Callback to invoke when slide ends.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.Splitter.layout">
            <summary>
                Orientation of the panels, valid values are "horizontal" and "vertical".
                <br/>
                @defaultValue horizontal
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.Splitter.gutterSize">
            <summary>
                Size of the divider in pixels.
                <br/>
                @defaultValue 4
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.Splitter.stateKey">
            <summary>
                Storage identifier of a stateful Splitter.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.Splitter.stateStorage">
            <summary>
                Defines where a stateful splitter keeps its state, valid values are "session" for sessionStorage and "local" for localStorage.
                <br/>
                @defaultValue session
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.SplitterPanel.size">
            <summary>
                Size of the element relative to 100%.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.SplitterPanel.minSize">
            <summary>
                Minimum size of the element relative to 100%.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.SplitterPanel.className">
            <summary>
                ClassName of the component.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.TabPanel.header">
            <summary>
                Orientation of tab headers.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.TabPanel.headerTemplate">
            <summary>
                Header template of the tab to customize more.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.TabPanel.leftIcon">
            <summary>
                Icons can be placed at left of a header.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.TabPanel.rightIcon">
            <summary>
                Icons can be placed at right of a header.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.TabPanel.prevButton">
            <summary>
                Previous button of the tab header.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.TabPanel.nextButton">
            <summary>
                Next button of the tab header.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.TabPanel.closeIcon">
            <summary>
                Close button of the tab header.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.TabPanel.disabled">
            <summary>
                Whether the tab is disabled.
                <br/>
                @defaultValue false
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.TabPanel.closable">
            <summary>
                Defines if tab can be removed.
                <br/>
                @defaultValue false
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.TabPanel.className">
            <summary>
                Style class of the tab header and content.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.TabPanel.headerStyle">
            <summary>
                Inline style of the tab header.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.TabPanel.headerClassName">
            <summary>
                Style class of the tab header.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.TabPanel.contentStyle">
            <summary>
                Inline style of the tab content.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.TabPanel.contentClassName">
            <summary>
                Style class of the tab content.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.TabView.activeIndex">
            <summary>
                Active index of the TabView.
                <br/>
                @defaultValue 0
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.TabView.panelContainerClassName">
            <summary>
                Style class of the panels container of the tabview.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.TabView.panelContainerStyle">
            <summary>
                Inline style of the panels container of the tabview.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.TabView.renderActiveOnly">
            <summary>
                Whether to render the contents of the selected tab or all tabs.
                <br/>
                @defaultValue true
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.TabView.scrollable">
            <summary>
                When enabled displays buttons at each side of the tab headers to scroll the tab list.
                <br/>
                @defaultValue false
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.TabView.onTabChange">
            <summary>
                Callback to invoke when an active tab is changed.
                <br/>
                @param {TabViewTabChangeEvent} event -  Custom tab change event.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.TabView.onTabClose">
            <summary>
                Callback to invoke when an active tab is closed.
                <br/>
                @param {TabViewTabCloseEvent} event - Custom tab close event.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.Tooltip.position">
            <summary>
            Position of the tooltip, valid values are right, left, top and bottom.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.Tooltip.target">
            <summary>
            Target element on global tooltip option.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.Tooltip.showDelay">
            <summary>
            Delay to show the tooltip in milliseconds.
            <para>Default: 0</para>
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.Tooltip.updateDelay">
            <summary>
            	Delay to update the tooltip in milliseconds.
            <para>Default: 0</para>
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.Tooltip.hideDelay">
            <summary>
            Delay to hide the tooltip in milliseconds.
            <para>Default: 0</para>
            </summary>
        </member>
        <member name="T:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.TooltipPositionType">
            <summary>
                The tooltip position type
            </summary>
        </member>
        <member name="F:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.TooltipPositionType.top">
            <summary>
                The top
            </summary>
        </member>
        <member name="F:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.TooltipPositionType.bottom">
            <summary>
                The bottom
            </summary>
        </member>
        <member name="F:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.TooltipPositionType.left">
            <summary>
                The left
            </summary>
        </member>
        <member name="F:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.TooltipPositionType.right">
            <summary>
                The right
            </summary>
        </member>
        <member name="T:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.TooltipEventType">
            <summary>
                The tooltip event type
            </summary>
        </member>
        <member name="F:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.TooltipEventType.hover">
            <summary>
                The hover
            </summary>
        </member>
        <member name="F:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.TooltipEventType.focus">
            <summary>
                The focus
            </summary>
        </member>
        <member name="T:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.TooltipOptions">
            <summary>
                The tooltip options
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.TooltipOptions.className">
            <summary>
                Style class of the tooltip.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.TooltipOptions.position">
            <summary>
                Position of the tooltip, valid values are right, left, top and bottom.
                <para>Default: right</para>
            </summary>
        </member>
        <member name="F:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.TooltipOptions.style">
            <summary>
                Style of the tooltip.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.TooltipOptions.my">
            <summary>
                Defines which position on the tooltip being positioned to align with the target element.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.TooltipOptions.at">
            <summary>
                Defines which position on the target element to align the positioned tooltip.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.TooltipOptions.event">
            <summary>
                Event to show the tooltip, valid values are hover and focus.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.TooltipOptions.showEvent">
            <summary>
                Event to show the tooltip if the event property is empty.
                <para>Default mouseenter</para>
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.TooltipOptions.hideEvent">
            <summary>
                Event to hide the tooltip if the event property is empty.
                <para>Default mouseleave</para>
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.TooltipOptions.autoZIndex">
            <summary>
                Whether to automatically manage layering.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.TooltipOptions.baseZIndex">
            <summary>
                Base zIndex value to use in layering.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.TooltipOptions.mouseTrack">
            <summary>
                Whether the tooltip will follow the mouse.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.TooltipOptions.mouseTrackTop">
            <summary>
                Defines top position of the tooltip in relation to the mouse when the mouseTrack is enabled.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.TooltipOptions.mouseTrackLeft">
            <summary>
                Defines top position of the tooltip in relation to the mouse when the mouseTrack is enabled.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.TooltipOptions.showDelay">
            <summary>
                Delay to show the tooltip in milliseconds.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.TooltipOptions.updateDelay">
            <summary>
                Delay to update the tooltip in milliseconds.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.TooltipOptions.hideDelay">
            <summary>
                Delay to hide the tooltip in milliseconds.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.TooltipOptions.autoHide">
            <summary>
                Whether to hide tooltip when hovering over tooltip content.
            <para>Default true</para>
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.TooltipOptions.disabled">
            <summary>
                Gets or sets a value indicating whether this <see cref="T:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.TooltipOptions" /> is disabled.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.TooltipOptions.showOnDisabled">
            <summary>
                Gets or sets a value indicating whether [show on disabled].
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.SingleSelectionTree`1.value">
            <summary>
                Selected value to display.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.SingleSelectionTree`1.filter">
            <summary>
                When specified, displays an input field to filter the items.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.SingleSelectionTree`1.filterValue">
            <summary>
                When filtering is enabled, the value of input field.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.SingleSelectionTree`1.filterPlaceholder">
            <summary>
                Placeholder text to show when filter input is empty.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.SingleSelectionTree`1.filterBy">
            <summary>
                When filtering is enabled, filterBy decides which field or fields (comma separated) to search against.
                <para>Default: label</para>
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.PrimeReact.SingleSelectionTree`1.expandedKeys">
            <summary>
            An array of keys to represent the state of the tree expansion state in controlled mode.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.React_Player.ReactPlayer.url">
            <summary>
            The url of a video or song to play
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.React_Player.ReactPlayer.playing">
            <summary>
            Set to true or false to pause or play the media.
            <br/>
            Default: false
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.React_Player.ReactPlayer.controls">
            <summary>
            Set to true or false to display native player controls.
            <br/>
            For Vimeo videos, hiding controls must be enabled by the video owner.
            <br/>
            Default: false
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.React_Player.ReactPlayer.playsinline">
            <summary>
            Applies the playsinline attribute where supported
            <br/>
            Default: false
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.React_Player.ReactPlayer.light">
            <summary>
            Set to true to show just the video thumbnail, which loads the full player on click
            <br/>
             Pass in an image URL to override the preview image
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.React_Player.ReactPlayer.volume">
            <summary>
            Set the volume of the player, between 0 and 1
            <br/>
             null uses default volume on all players
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.React_Player.ReactPlayer.muted">
            <summary>
            Mutes the player
            <br/>
             Only works if volume is set
            <br/>
             Default: False
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.React_Player.ReactPlayer.playbackRate">
            <summary>
            Set the playback rate of the player
            <br/>
             Only supported by YouTube, Wistia, and file paths
            <br/>
             Default: 1
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.React_Player.ReactPlayer.width">
            <summary>
            Set the width of the player
            <br/>
             Default: 640px
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.React_Player.ReactPlayer.height">
            <summary>
            Set the height of the player
            <br/>
             Default: 360px
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.React_Player.ReactPlayer.pip">
            <summary>
            Set to true or false to enable or disable picture-in-picture mode
            <br/>
              Only available when playing file URLs in certain browsers
            <br/>
             Default: false
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.React_Player.ReactPlayer.stopOnUnmount">
            <summary>
            If you are using pip you may want to use stopOnUnmount={false} to continue playing in picture-in-picture mode even after ReactPlayer unmounts
            <br/>
             Default: true
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.React_Player.ReactPlayer.config">
            <summary>
            Override options for the various players, see config prop
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.React_Player.ReactPlayer.onReady">
            <summary>
            Called when media is loaded and ready to play. If playing is set to true, media will play immediately
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.React_Player.ReactPlayer.onStart">
            <summary>
            Called when media starts playing
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.React_Player.ReactPlayer.onPlay">
            <summary>
            Called when media starts or resumes playing after pausing or buffering
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.React_Player.ReactPlayer.onPause">
            <summary>
            Called when media is paused
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.React_Player.ReactPlayer.onEnded">
            <summary>
            Called when media finishes playing
            <br/>
            Does not fire when loop is set to true
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.ReactAwesomeReveal.RevealBase.reverse">
            <summary>
                Specifies if the animation should make element(s) disappear.<br />
                @default false
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.ReactAwesomeReveal.RevealBase.cascade">
            <summary>
                <br />Stagger its children animations.
                @default false
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.ReactAwesomeReveal.RevealBase.childClassName">
            <summary>
                <br /> Class names to add to the child element.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.ReactAwesomeReveal.RevealBase.childStyle">
            <summary>
                <br /> Inline styles to add to the child element.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.ReactAwesomeReveal.RevealBase.damping">
            <summary>
                <br /> Factor that affects the delay that each animated element in a cascade animation will be assigned.
                <br />  @default 0.5
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.ReactAwesomeReveal.RevealBase.delay">
            <summary>
                <br /> Initial delay, in milliseconds.
                <br /> @default 0
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.ReactAwesomeReveal.RevealBase.duration">
            <summary>
                <br /> Animation duration, in milliseconds.
                <br /> @default 1000
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.ReactAwesomeReveal.RevealBase.fraction">
            <summary>
                <br /> Float number between 0 and 1 indicating how much the element should be in viewport before the animation is
                triggered.
                <br /> @default 0
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.ReactAwesomeReveal.RevealBase.triggerOnce">
            <summary>
                <br /> Specifies if the animation should run only once or everytime the element enters/exits/re-enters the
                viewport.
                <br /> @default false
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.ReactAwesomeReveal.AttentionSeeker.effect">
            <summary>
                The animation effect to use for this attention seeker.
                <br />
                <br />"bounce" | "flash" | "headShake" | "heartBeat" | "jello" | "pulse" | "rubberBand" | "shake" | "shakeX" |
                "shakeY" | "swing" | "tada" | "wobble"
                <br />  @default "bounce"
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.ReactAwesomeReveal.Bounce.direction">
            <summary>
                <br /> Origin of the animation.
                <br />"down" | "left" | "right" | "up"
                <br />  @default undefined
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.ReactAwesomeReveal.Fade.big">
            <summary>
                <br /> Causes the animation to start farther. Only works with "down", "left", "right" and "up" directions.
                <br /> @default false
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.ReactAwesomeReveal.Fade.direction">
            <summary>
                <br /> Origin of the animation.
                <br /> @default undefined
                <br /> "bottom-left" | "bottom-right" | "down" | "left" | "right" | "top-left" | "top-right" | "up"
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.ReactAwesomeReveal.Flip.direction">
            <summary>
                <br /> Origin of the animation.
                <br /> @default undefined
                <br /> "horizontal" | "vertical"
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.ReactAwesomeReveal.Rotate.direction">
            <summary>
                <br /> Origin of the animation.
                <br /> @default undefined
                <br />  "bottom-left" | "bottom-right" | "top-left" | "top-right"
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.ReactAwesomeReveal.Slide.direction">
            <summary>
                <br /> Origin of the animation.
                <br /> @default undefined
                <br />  "down" | "left" | "right" | "up"
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.ReactAwesomeReveal.Zoom.direction">
            <summary>
                <br /> Origin of the animation.
                <br /> @default undefined
                <br />  "down" | "left" | "right" | "up"
            </summary>
        </member>
        <member name="T:ReactWithDotNet.ThirdPartyLibraries.ReactFreeScrollbar.FreeScrollBar">
            <summary>
            https://www.npmjs.com/package/react-free-scrollbar
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.ReactFreeScrollbar.FreeScrollBar.fixed">
            <summary>
            You can pass fixed to decide if handler's position: fixed or static. If fixed equals true, then the handler will overlap the content inside the scroller.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.ReactFreeScrollbar.FreeScrollBar.autohide">
            <summary>
            Set true if you want a macOS style auto-hide scroller.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.ReactFreeScrollbar.FreeScrollBar.timeout">
            <summary>
            The time length of the handler disappears. Default: 2000
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.ReactFreeScrollbar.FreeScrollBar.tracksize">
            <summary>
            The width of the vertical handler or the height of the horizontal handler. Default: 10px
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.ReactFreeScrollbar.FreeScrollBar.start">
            <summary>
            The starting position of the scroll area, can be descriptive string or an object.
            <br/>
            Options: "bottom", "bottom right", "top right", "right", {top: 20, left: 30}
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.ReactFreeScrollbar.FreeScrollBar.browserOffset">
            <summary>
            The browser scroll bar width. Default: "17px". It should fit for most browsers.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.ReactFreeScrollbar.FreeScrollBar.onScrollbarScrollTimeout">
            <summary>
            This timeout adds a throttle for onScrollbarScroll. Default is 300. Set to 0 to remove throttle.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.ReactSimpleCodeEditor.Editor.highlight">
            <summary>
                Callback which will receive text to highlight. You'll need to return an HTML string or a React element with syntax
                highlighting using a library such as prismjs.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.ReactSimpleCodeEditor.Editor.ignoreTabKey">
            <summary>
                Whether the editor should ignore tab key presses so that keyboard users can tab past the editor. Users can toggle
                this behaviour using Ctrl+Shift+M (Mac) / Ctrl+M manually when this is false. Default: false.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.ReactSimpleCodeEditor.Editor.insertSpaces">
            <summary>
                Whether to use spaces for indentation. Default: true. If you set it to false, you might also want to set tabSize to
                1.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.ReactSimpleCodeEditor.Editor.padding">
            <summary>
                Optional padding for code. Default: 0.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.ReactSimpleCodeEditor.Editor.preClassName">
            <summary>
                A className for the underlying pre, can be useful for more precise control of its styles.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.ReactSimpleCodeEditor.Editor.tabSize">
            <summary>
                The number of characters to insert when pressing tab key. For example, for 4 space indentation, tabSize will be 4
                and insertSpaces will be true. Default: 2.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.ReactSimpleCodeEditor.Editor.textareaClassName">
            <summary>
                A className for the underlying textarea, can be useful for more precise control of its styles.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.ReactSimpleCodeEditor.Editor.textareaId">
            <summary>
                An ID for the underlying textarea, can be useful for setting a label.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.ReactSimpleCodeEditor.Editor.valueBindDebounceHandler">
            <summary>
                if you want to handle when user iteraction finished see example below<br />
                component.valueBind = ()=>state.UserInfo.Name<br />
                component.valueBindDebounceTimeout = 600 // milliseconds<br />
                component.valueBindDebounceHandler = OnUserIterationFinished<br />
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.ReactSimpleCodeEditor.Editor.valueBindDebounceTimeout">
            <summary>
                if you want to handle when user iteraction finished see example below<br />
                component.valueBind = ()=>state.UserInfo.Name<br />
                component.valueBindDebounceTimeout = 600 // milliseconds<br />
                component.valueBindDebounceHandler = OnUserIterationFinished<br />
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.ReactXarrows.Xarrow.start">
            <summary>
                required
                can be a reference to a react ref to html element or string - an id of a DOM element.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.ReactXarrows.Xarrow.end">
            <summary>
                required
                can be a reference to a react ref to html element or string - an id of a DOM element.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.ReactXarrows.Xarrow.startAnchor">
            <summary>
                "auto" | "middle" | "left" | "right" | "top" | "bottom"
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.ReactXarrows.Xarrow.endAnchor">
            <summary>
                "auto" | "middle" | "left" | "right" | "top" | "bottom"
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.ReactXarrows.Xarrow.color">
            <summary>
                defines color to the entire arrow. lineColor,headColor and tailColor will override color specifically for line,tail
                or head
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.ReactXarrows.Xarrow.strokeWidth">
            <summary>
                defines the thickness of the entire arrow. headSize and tailSize defines how big will be the head or tail relative
                to the strokeWidth
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.ReactXarrows.Xarrow.path">
            <summary>
                can be one of: "smooth" | "grid" | "straight", and it controls the path arrow is drawn, exactly how their name
                suggest
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.ReactXarrows.Xarrow.curveness">
            <summary>
                defines how much the lines curve. makes a difference only in path='smooth'
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.ReactXarrows.Xarrow.dashness">
            <summary>
                can make the arrow dashed and can even animate. if true default values(for dashness) are chosen. if object is passed then default values are chosen except what passed.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.ReactXarrows.Xarrow.animateDrawing">
            <summary>
                can animate the drawing of the arrow using svg animation. type: boolean|number. if true animation duration is 1s.
                if number is passed then animation duration is number's value in seconds
                <example>animateDrawing={0.1} will animate the drawing of the arrow in 100 milliseconds.</example>
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.ReactXarrows.Xarrow.headShape">
            <summary>
            you can customize the svg edges (head or tail) of the arrow. you can use predefined svg by passing string,one of "arrow1" | "circle" | "heart"
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.ReactXarrows.Xarrow.tailShape">
            <summary>
            you can customize the svg edges (head or tail) of the arrow. you can use predefined svg by passing string,one of "arrow1" | "circle" | "heart"
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.UIW.ReactCodemirror.CodeMirror.valueBindDebounceHandler">
            <summary>
            if you want to handle when user iteraction finished see example below<br/>
            component.valueBind = ()=>state.UserInfo.Name<br/>
            component.valueBindDebounceTimeout = 600 // milliseconds<br/>
            component.valueBindDebounceHandler = OnUserIterationFinished<br/>
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.UIW.ReactCodemirror.CodeMirror.valueBindDebounceTimeout">
            <summary>
            if you want to handle when user iteraction finished see example below<br/>
            component.valueBind = ()=>state.UserInfo.Name<br/>
            component.valueBindDebounceTimeout = 600 // milliseconds<br/>
            component.valueBindDebounceHandler = OnUserIterationFinished<br/>
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.UIW.ReactTextareaCodeEditor.CodeEditor.valueBindDebounceHandler">
            <summary>
                if you want to handle when user iteraction finished see example below<br />
                component.valueBind = ()=>state.UserInfo.Name<br />
                component.valueBindDebounceTimeout = 600 // milliseconds<br />
                component.valueBindDebounceHandler = OnUserIterationFinished<br />
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries.UIW.ReactTextareaCodeEditor.CodeEditor.valueBindDebounceTimeout">
            <summary>
                if you want to handle when user iteraction finished see example below<br />
                component.valueBind = ()=>state.UserInfo.Name<br />
                component.valueBindDebounceTimeout = 600 // milliseconds<br />
                component.valueBindDebounceHandler = OnUserIterationFinished<br />
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyLibraries._Swiper_.Swiper.breakpoints">
            <summary>
            Sample: <br/>
            // when window width is &gt;= 320px <br/>
            320: { <br/>
             slidesPerView: 2, <br/>
             spaceBetween: 20 <br/>
            },
            <br/>
            <br/>
            // when window width is &gt;= 480px <br/>
            480: { <br/>
              slidesPerView: 3, <br/>
              spaceBetween: 30 <br/>
            }<br/>
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyReactComponent.className">
            <summary>
                Gets or sets the name of the class.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyReactComponent.style">
            <summary>
                Gets the style.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.ThirdPartyReactComponent.SuspenseFallback">
            <summary>
                This is designed for Suspense part of react. When page first rendered as pure html.
                <br />
                When react component fully loaded then this element will be replace by original component.
                <br />
                Default value is simple empty div element
            </summary>
        </member>
    </members>
</doc>
