<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ReactWithDotNet.Libraries</name>
    </assembly>
    <members>
        <member name="P:ReactWithDotNet.Libraries.mui.material.ButtonBase.centerRipple">
            <summary>
                If `true`, the ripples are centered.
                <br/>
                They won't start at the cursor interaction position.
                <br/>
                @default false
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.mui.material.ButtonBase.classes">
            <summary>
                Override or extend the styles applied to the component.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.mui.material.ButtonBase.disabled">
            <summary>
                If `true`, the component is disabled.
                <br/>
                @default false
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.mui.material.ButtonBase.disableRipple">
            <summary>
                If `true`, the ripple effect is disabled.
                <br/>
                <br/>
                <br/>
                ⚠️ Without a ripple there is no styling for :focus-visible by default. Be sure
                <br/>
                to highlight the element by applying separate styles with the `.Mui-focusVisible` class.
                <br/>
                @default false
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.mui.material.ButtonBase.disableTouchRipple">
            <summary>
                If `true`, the touch ripple effect is disabled.
                <br/>
                @default false
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.mui.material.ButtonBase.focusRipple">
            <summary>
                If `true`, the base button will have a keyboard focus ripple.
                <br/>
                @default false
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.mui.material.ButtonBase.focusVisibleClassName">
            <summary>
                This prop can help identify which element has keyboard focus.
                <br/>
                The class name will be applied when the element gains the focus through keyboard interaction.
                <br/>
                It's a polyfill for the [CSS :focus-visible selector](https://drafts.csswg.org/selectors-4/#the-focus-visible-pseudo).
                <br/>
                The rationale for using this feature [is explained here](https://github.com/WICG/focus-visible/blob/HEAD/explainer.md).
                <br/>
                A [polyfill can be used](https://github.com/WICG/focus-visible) to apply a `focus-visible` class to other components
                <br/>
                if needed.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.mui.material.ButtonBase.sx">
            <summary>
                The system prop that allows defining system overrides as well as additional CSS styles.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.mui.material.ButtonBase.TouchRippleProps">
            <summary>
                Props applied to the `TouchRipple` element.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.mui.material.Card.classes">
            <summary>
                Override or extend the styles applied to the component.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.mui.material.Card.raised">
            <summary>
                If `true`, the card will use raised styling.
                <br/>
                @default false
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.mui.material.Card.sx">
            <summary>
                The system prop that allows defining system overrides as well as additional CSS styles.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.mui.material.CardActions.classes">
            <summary>
                Override or extend the styles applied to the component.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.mui.material.CardActions.sx">
            <summary>
                The system prop that allows defining system overrides as well as additional CSS styles.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.mui.material.CardActions.disableSpacing">
            <summary>
                If `true`, the actions do not have additional margin.
                <br/>
                @default false
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.mui.material.CardContent.classes">
            <summary>
                Override or extend the styles applied to the component.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.mui.material.CardContent.sx">
            <summary>
                The system prop that allows defining system overrides as well as additional CSS styles.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.mui.material.CardMedia.classes">
            <summary>
                Override or extend the styles applied to the component.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.mui.material.CardMedia.image">
            <summary>
                Image to be displayed as a background image.
                <br/>
                Either `image` or `src` prop must be specified.
                <br/>
                Note that caller must specify height otherwise the image will not be visible.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.mui.material.CardMedia.src">
            <summary>
                An alias for `image` property.
                <br/>
                Available only with media components.
                <br/>
                Media components: `video`, `audio`, `picture`, `iframe`, `img`.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.mui.material.CardMedia.sx">
            <summary>
                The system prop that allows defining system overrides as well as additional CSS styles.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.mui.material.Divider.absolute">
            <summary>
                Absolutely position the element.
                <br/>
                @default false
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.mui.material.Divider.classes">
            <summary>
                Override or extend the styles applied to the component.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.mui.material.Divider.flexItem">
            <summary>
                If `true`, a vertical divider will have the correct height when used in flex container.
                <br/>
                (By default, a vertical divider will have a calculated height of `0px` if it is the child of a flex container.)
                <br/>
                @default false
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.mui.material.Divider.light">
            <summary>
                If `true`, the divider will have a lighter color.
                <br/>
                @default false
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.mui.material.Divider.orientation">
            <summary>
                The component orientation.
                <br/>
                @default 'horizontal'
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.mui.material.Divider.sx">
            <summary>
                The system prop that allows defining system overrides as well as additional CSS styles.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.mui.material.Divider.textAlign">
            <summary>
                The text alignment.
                <br/>
                @default 'center'
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.mui.material.Divider.variant">
            <summary>
                The variant to use.
                <br/>
                @default 'fullWidth'
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.mui.material.ElementBase.sx">
            <summary>
                The system prop that allows defining system overrides as well as additional CSS styles.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.mui.material.IconButton.classes">
            <summary>
                Override or extend the styles applied to the component.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.mui.material.IconButton.color">
            <summary>
                The color of the component.
                <br/>
                It supports both default and custom theme colors, which can be added as shown in the
                <br/>
                [palette customization guide](https://mui.com/material-ui/customization/palette/#adding-new-colors).
                <br/>
                @default 'default'
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.mui.material.IconButton.disabled">
            <summary>
                If `true`, the component is disabled.
                <br/>
                @default false
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.mui.material.IconButton.disableFocusRipple">
            <summary>
                If `true`, the  keyboard focus ripple is disabled.
                <br/>
                @default false
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.mui.material.IconButton.edge">
            <summary>
                If given, uses a negative margin to counteract the padding on one
                <br/>
                side (this is often helpful for aligning the left or right
                <br/>
                side of the icon with content above or below, without ruining the border
                <br/>
                size and shape).
                <br/>
                @default false
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.mui.material.IconButton.size">
            <summary>
                The size of the component.
                <br/>
                `small` is equivalent to the dense button styling.
                <br/>
                @default 'medium'
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.mui.material.IconButton.sx">
            <summary>
                The system prop that allows defining system overrides as well as additional CSS styles.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.mui.material.Switch.checkedIcon">
            <summary>
                The icon to display when the component is checked.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.mui.material.Switch.classes">
            <summary>
                Override or extend the styles applied to the component.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.mui.material.Switch.color">
            <summary>
                The color of the component.
                <br/>
                It supports both default and custom theme colors, which can be added as shown in the
                <br/>
                [palette customization guide](https://mui.com/material-ui/customization/palette/#adding-new-colors).
                <br/>
                @default 'primary'
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.mui.material.Switch.disabled">
            <summary>
                If `true`, the component is disabled.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.mui.material.Switch.icon">
            <summary>
                The icon to display when the component is unchecked.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.mui.material.Switch.size">
            <summary>
                The size of the component.
                <br/>
                `small` is equivalent to the dense switch styling.
                <br/>
                @default 'medium'
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.mui.material.Switch.sx">
            <summary>
                The system prop that allows defining system overrides as well as additional CSS styles.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.mui.material.Switch.value">
            <summary>
                The value of the component. The DOM API casts this to a string.
                <br/>
                The browser uses "on" as the default value.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.mui.material.TextField.valueBindDebounceHandler">
            <summary>
                if you want to handle when user iteraction finished see example below<br />
                component.valueBind = ()=>state.UserInfo.Name<br />
                component.valueBindDebounceTimeout = 600 // milliseconds<br />
                component.valueBindDebounceHandler = OnUserIterationFinished<br />
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.mui.material.TextField.valueBindDebounceTimeout">
            <summary>
                if you want to handle when user iteraction finished see example below<br />
                component.valueBind = ()=>state.UserInfo.Name<br />
                component.valueBindDebounceTimeout = 600 // milliseconds<br />
                component.valueBindDebounceHandler = OnUserIterationFinished<br />
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.mui.material.TextField.autoComplete">
            <summary>
                This prop helps users to fill forms faster, especially on mobile devices.
                <br/>
                The name can be confusing, as it's more like an autofill.
                <br/>
                You can learn more about it [following the specification](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill).
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.mui.material.TextField.autoFocus">
            <summary>
                If `true`, the `input` element is focused during the first mount.
                <br/>
                @default false
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.mui.material.TextField.classes">
            <summary>
                Override or extend the styles applied to the component.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.mui.material.TextField.color">
            <summary>
                The color of the component.
                <br/>
                It supports both default and custom theme colors, which can be added as shown in the
                <br/>
                [palette customization guide](https://mui.com/material-ui/customization/palette/#adding-new-colors).
                <br/>
                @default 'primary'
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.mui.material.TextField.defaultValue">
            <summary>
                The default value. Use when the component is not controlled.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.mui.material.TextField.disabled">
            <summary>
                If `true`, the component is disabled.
                <br/>
                @default false
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.mui.material.TextField.error">
            <summary>
                If `true`, the label is displayed in an error state.
                <br/>
                @default false
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.mui.material.TextField.FormHelperTextProps">
            <summary>
                Props applied to the [`FormHelperText`](/material-ui/api/form-helper-text/) element.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.mui.material.TextField.fullWidth">
            <summary>
                If `true`, the input will take up the full width of its container.
                <br/>
                @default false
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.mui.material.TextField.helperText">
            <summary>
                The helper text content.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.mui.material.TextField.id">
            <summary>
                The id of the `input` element.
                <br/>
                Use this prop to make `label` and `helperText` accessible for screen readers.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.mui.material.TextField.InputLabelProps">
            <summary>
                Props applied to the [`InputLabel`](/material-ui/api/input-label/) element.
                <br/>
                Pointer events like `onClick` are enabled if and only if `shrink` is `true`.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.mui.material.TextField.inputProps">
            <summary>
                [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.mui.material.TextField.label">
            <summary>
                The label content.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.mui.material.TextField.multiline">
            <summary>
                If `true`, a `textarea` element is rendered instead of an input.
                <br/>
                @default false
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.mui.material.TextField.name">
            <summary>
                Name attribute of the `input` element.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.mui.material.TextField.placeholder">
            <summary>
                The short hint displayed in the `input` before the user enters a value.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.mui.material.TextField.required">
            <summary>
                If `true`, the label is displayed as required and the `input` element is required.
                <br/>
                @default false
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.mui.material.TextField.rows">
            <summary>
                Number of rows to display when multiline option is set to true.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.mui.material.TextField.maxRows">
            <summary>
                Maximum number of rows to display when multiline option is set to true.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.mui.material.TextField.minRows">
            <summary>
                Minimum number of rows to display when multiline option is set to true.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.mui.material.TextField.select">
            <summary>
                Render a [`Select`](/material-ui/api/select/) element while passing the Input element to `Select` as `input` parameter.
                <br/>
                If this option is set you must pass the options of the select as children.
                <br/>
                @default false
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.mui.material.TextField.SelectProps">
            <summary>
                Props applied to the [`Select`](/material-ui/api/select/) element.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.mui.material.TextField.size">
            <summary>
                The size of the component.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.mui.material.TextField.sx">
            <summary>
                The system prop that allows defining system overrides as well as additional CSS styles.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.mui.material.TextField.type">
            <summary>
                Type of the `input` element. It should be [a valid HTML5 input type](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_%3Cinput%3E_types).
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.mui.material.TextField.value">
            <summary>
                The value of the `input` element, required for a controlled component.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.mui.material.Paper.classes">
            <summary>
                Override or extend the styles applied to the component.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.mui.material.Paper.elevation">
            <summary>
                Shadow depth, corresponds to `dp` in the spec.
                <br/>
                It accepts values between 0 and 24 inclusive.
                <br/>
                @default 1
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.mui.material.Paper.square">
            <summary>
                If `true`, rounded corners are disabled.
                <br/>
                @default false
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.mui.material.Paper.sx">
            <summary>
                The system prop that allows defining system overrides as well as additional CSS styles.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.mui.material.Paper.variant">
            <summary>
                The variant to use.
                <br/>
                @default 'elevation'
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.mui.material.SwitchBase.checked">
            <summary>
                If `true`, the component is checked.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.mui.material.SwitchBase.classes">
            <summary>
                Override or extend the styles applied to the component.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.mui.material.SwitchBase.defaultChecked">
            <summary>
                The default checked state. Use when the component is not controlled.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.mui.material.SwitchBase.disabled">
            <summary>
                If `true`, the component is disabled.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.mui.material.SwitchBase.disableRipple">
            <summary>
                If `true`, the ripple effect is disabled.
                <br/>
                @default false
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.mui.material.SwitchBase.disableFocusRipple">
            <summary>
                If `true`, the  keyboard focus ripple is disabled.
                <br/>
                @default false
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.mui.material.SwitchBase.edge">
            <summary>
                If given, uses a negative margin to counteract the padding on one
                <br/>
                side (this is often helpful for aligning the left or right
                <br/>
                side of the icon with content above or below, without ruining the border
                <br/>
                size and shape).
                <br/>
                @default false
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.mui.material.SwitchBase.id">
            <summary>
                The id of the `input` element.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.mui.material.SwitchBase.inputProps">
            <summary>
                [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.mui.material.SwitchBase.name">
            <summary>
                Pass a ref to the `input` element.
            </summary>
            <summary>
                Name attribute of the `input` element.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:ReactWithDotNet.Libraries.mui.material.SwitchBase.readOnly" -->
        <member name="P:ReactWithDotNet.Libraries.mui.material.SwitchBase.required">
            <summary>
                If `true`, the `input` element is required.
                <br/>
                @default false
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.mui.material.SwitchBase.value">
            <summary>
                The value of the component. The DOM API casts this to a string.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.mui.material.Tooltip.arrow">
            <summary>
                If `true`, adds an arrow to the tooltip.
                <br/>
                @default false
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.mui.material.Tooltip.classes">
            <summary>
                Override or extend the styles applied to the component.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.mui.material.Tooltip.components">
            <summary>
                The components used for each slot inside.
                <br/>
                <br/>
                <br/>
                This prop is an alias for the `slots` prop.
                <br/>
                It's recommended to use the `slots` prop instead.
                <br/>
                <br/>
                <br/>
                @default {}
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.mui.material.Tooltip.componentsProps">
            <summary>
                The extra props for the slot components.
                <br/>
                You can override the existing props or add new ones.
                <br/>
                <br/>
                <br/>
                This prop is an alias for the `slotProps` prop.
                <br/>
                It's recommended to use the `slotProps` prop instead, as `componentsProps` will be deprecated in the future.
                <br/>
                <br/>
                <br/>
                @default {}
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.mui.material.Tooltip.describeChild">
            <summary>
                Set to `true` if the `title` acts as an accessible description.
                <br/>
                By default the `title` acts as an accessible label for the child.
                <br/>
                @default false
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.mui.material.Tooltip.disableFocusListener">
            <summary>
                Do not respond to focus-visible events.
                <br/>
                @default false
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.mui.material.Tooltip.disableHoverListener">
            <summary>
                Do not respond to hover events.
                <br/>
                @default false
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.mui.material.Tooltip.disableInteractive">
            <summary>
                Makes a tooltip not interactive, i.e. it will close when the user
                <br/>
                hovers over the tooltip before the `leaveDelay` is expired.
                <br/>
                @default false
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.mui.material.Tooltip.disableTouchListener">
            <summary>
                Do not respond to long press touch events.
                <br/>
                @default false
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.mui.material.Tooltip.enterDelay">
            <summary>
                The number of milliseconds to wait before showing the tooltip.
                <br/>
                This prop won't impact the enter touch delay (`enterTouchDelay`).
                <br/>
                @default 100
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.mui.material.Tooltip.enterNextDelay">
            <summary>
                The number of milliseconds to wait before showing the tooltip when one was already recently opened.
                <br/>
                @default 0
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.mui.material.Tooltip.enterTouchDelay">
            <summary>
                The number of milliseconds a user must touch the element before showing the tooltip.
                <br/>
                @default 700
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.mui.material.Tooltip.followCursor">
            <summary>
                If `true`, the tooltip follow the cursor over the wrapped element.
                <br/>
                @default false
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.mui.material.Tooltip.id">
            <summary>
                This prop is used to help implement the accessibility logic.
                <br/>
                If you don't provide this prop. It falls back to a randomly generated id.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.mui.material.Tooltip.leaveDelay">
            <summary>
                The number of milliseconds to wait before hiding the tooltip.
                <br/>
                This prop won't impact the leave touch delay (`leaveTouchDelay`).
                <br/>
                @default 0
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.mui.material.Tooltip.leaveTouchDelay">
            <summary>
                The number of milliseconds after the user stops touching an element before hiding the tooltip.
                <br/>
                @default 1500
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.mui.material.Tooltip.open">
            <summary>
                Callback fired when the component requests to be closed.
                <br/>
                <br/>
                <br/>
                @param {React.SyntheticEvent} event The event source of the callback.
            </summary>
            <summary>
                Callback fired when the component requests to be open.
                <br/>
                <br/>
                <br/>
                @param {React.SyntheticEvent} event The event source of the callback.
            </summary>
            <summary>
                If `true`, the component is shown.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.mui.material.Tooltip.placement">
            <summary>
                Tooltip placement.
                <br/>
                @default 'bottom'
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.mui.material.Tooltip.PopperProps">
            <summary>
                Props applied to the [`Popper`](/material-ui/api/popper/) element.
                <br/>
                @default {}
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.mui.material.Tooltip.slotProps">
            <summary>
                The extra props for the slot components.
                <br/>
                You can override the existing props or add new ones.
                <br/>
                <br/>
                <br/>
                This prop is an alias for the `componentsProps` prop, which will be deprecated in the future.
                <br/>
                <br/>
                <br/>
                @default {}
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.mui.material.Tooltip.slots">
            <summary>
                The components used for each slot inside.
                <br/>
                <br/>
                <br/>
                This prop is an alias for the `components` prop, which will be deprecated in the future.
                <br/>
                <br/>
                <br/>
                @default {}
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.mui.material.Tooltip.sx">
            <summary>
                The system prop that allows defining system overrides as well as additional CSS styles.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.mui.material.Tooltip.title">
            <summary>
                Tooltip title. Zero-length titles string, undefined, null and false are never displayed.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.mui.material.Typography.align">
            <summary>
                Set the text-align on the component.
                <br/>
                @default 'inherit'
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.mui.material.Typography.classes">
            <summary>
                Override or extend the styles applied to the component.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.mui.material.Typography.gutterBottom">
            <summary>
                If `true`, the text will have a bottom margin.
                <br/>
                @default false
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.mui.material.Typography.noWrap">
            <summary>
                If `true`, the text will not wrap, but instead will truncate with a text overflow ellipsis.
                <br/>
                <br/>
                <br/>
                Note that text overflow can only happen with block or inline-block level elements
                <br/>
                (the element needs to have a width in order to overflow).
                <br/>
                @default false
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.mui.material.Typography.paragraph">
            <summary>
                If `true`, the element will be a paragraph element.
                <br/>
                @default false
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.mui.material.Typography.sx">
            <summary>
                The system prop that allows defining system overrides as well as additional CSS styles.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.mui.material.Typography.variant">
            <summary>
                Applies the theme typography styles.
                <br/>
                @default 'body1'
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:ReactWithDotNet.Libraries.mui.material.Typography.variantMapping" -->
        <member name="P:ReactWithDotNet.Libraries.PrimeReact.AutoComplete`1.delay">
            <summary>
            Delay between keystrokes to wait before sending a query.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.PrimeReact.AutoComplete`1.suggestions">
            <summary>
                An array of suggestions to display.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.PrimeReact.AutoComplete`1.onChange">
            <summary>
                Callback to invoke when autocomplete value changes.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.PrimeReact.AutoComplete`1.completeMethod">
            <summary>
                Callback to invoke to search for suggestions.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.PrimeReact.AutoComplete`1.field">
            <summary>
                Field of a suggested object to resolve and display.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.PrimeReact.AutoComplete`1.forceSelection">
            <summary>
                When present, autocomplete clears the manual input if it does not match of the suggestions to force only accepting
                values from the suggestions.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.PrimeReact.AutoComplete`1.dropdown">
            <summary>
            Displays a button next to the input field when enabled.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.PrimeReact.BlockUI.blocked">
            <summary>
            Controls the blocked state.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.PrimeReact.Button.label">
            <summary>
                Text of the button.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.PrimeReact.Button.iconPos">
            <summary>
            Position of the icon, valid values are "left", "right", "top" and "bottom".
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.PrimeReact.Button.loading">
             <summary>
            Display loading icon of the button
             </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.PrimeReact.Button.loadingIcon">
            <summary>
            Name of the loading icon or JSX.Element for loading icon.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.PrimeReact.Dialog.visible">
            <summary>
            Specifies the visibility of the dialog.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.PrimeReact.Dialog.modal">
            <summary>
            Defines if background should be blocked when dialog is displayed.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.PrimeReact.Dialog.footer">
            <summary>
            Footer content of the dialog.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.PrimeReact.Dialog.header">
            <summary>
            Title content of the dialog.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.PrimeReact.Dialog.closable">
            <summary>
            Adds a close icon to the header to hide the dialog.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.PrimeReact.Dialog.onShow">
            <summary>
            Callback to invoke when dialog is showed.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.PrimeReact.Dialog.onHide">
            <summary>
            Callback to invoke when dialog is hidden (Required).
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.PrimeReact.Checkbox.value">
            <summary>
            Value of the checkbox.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.PrimeReact.Checkbox.checked">
            <summary>
               Specifies whether a checkbox should be checked or not.
                <para>default: false</para>
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.PrimeReact.Checkbox.disabled">
            <summary>
            When present, it specifies that the element value cannot be altered.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.PrimeReact.Checkbox.onChange">
            <summary>
            Callback to invoke on value change
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.PrimeReact.Dropdown.filterBy">
            <summary>
            When filtering is enabled, filterBy decides which field or fields (comma separated) to search against.
            <para>Default: label</para>
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.PrimeReact.Dropdown.showClear">
            <summary>
            When enabled, a clear icon is displayed to clear the value.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.PrimeReact.Dropdown.filter">
            <summary>
            When specified, displays an input field to filter the items on keyup.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.PrimeReact.InputMask.mask">
            <summary>
                Mask pattern.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.PrimeReact.InputMask.placeholder">
            <summary>
                Advisory information to display on input.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.PrimeReact.InputMask.maxlength">
            <summary>
                Maximum number of character allows in the input field.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.PrimeReact.InputSwitch.checked">
            <summary>
                Specifies whether a inputswitch should be checked or not.
                <para>default: false</para>
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.PrimeReact.InputSwitch.disabled">
            <summary>
                When present, it specifies that the component should be disabled.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.PrimeReact.InputSwitch.onChange">
            <summary>
                Callback to invoke on value change
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.PrimeReact.InputText.valueBindDebounceHandler">
            <summary>
            if you want to handle when user iteraction finished see example below<br/>
            component.valueBind = ()=>state.UserInfo.Name<br/>
            component.valueBindDebounceTimeout = 600 // milliseconds<br/>
            component.valueBindDebounceHandler = OnUserIterationFinished<br/>
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.PrimeReact.InputText.valueBindDebounceTimeout">
            <summary>
            if you want to handle when user iteraction finished see example below<br/>
            component.valueBind = ()=>state.UserInfo.Name<br/>
            component.valueBindDebounceTimeout = 600 // milliseconds<br/>
            component.valueBindDebounceHandler = OnUserIterationFinished<br/>
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.PrimeReact.InputText.keyfilter">
            <summary>
            Format definition of the keys to block.
            <para>Default: null</para>
            <para>Type: string/regex</para>
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.PrimeReact.InputTextarea.autoResize">
             <summary>
            When present, height of textarea changes as being typed.
             <para>Default: false</para>
             </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.PrimeReact.ListBoxSingleSelection`1.filter">
            <summary>
                When specified, displays a filter input at header.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.PrimeReact.ListBoxSingleSelection`1.filterPlaceholder">
            <summary>
            Placeholder text to show when filter input is empty.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.PrimeReact.ListBoxSingleSelection`1.listStyle">
            <summary>
                Inline style of inner list element.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.PrimeReact.ListBoxSingleSelection`1.optionLabel">
            <summary>
                Name of the label field of an option when an arbitrary objects instead of SelectItems are used as options.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.PrimeReact.ListBoxSingleSelection`1.options">
            <summary>
                An array of objects to display as the available options.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.PrimeReact.ListBoxSingleSelection`1.optionValue">
            <summary>
                Name of the value field of an option when arbitrary objects are used as options instead of SelectItems.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.PrimeReact.ListBoxSingleSelection`1.value">
            <summary>
                Selected value to display.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.PrimeReact.Message.text">
            <summary>
                Text of the message.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.PrimeReact.Message.severity">
            <summary>
            Severity level of the message.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.PrimeReact.Panel.collapsed">
            <summary>
                	Defines the initial state of panel content, supports one or two-way binding as well.
                <para>default: false</para>
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.PrimeReact.Panel.toggleable">
            <summary>
                Defines if content of panel can be expanded and collapsed.
                <para>default: false</para>
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.PrimeReact.Panel.header">
            <summary>
            Custom header template of the panel.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.PrimeReact.Panel.headerTemplate">
            <summary>
               Header template of the panel to customize more.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.PrimeReact.Panel.onToggle">
            <summary>
                Callback to invoke when a tab gets expanded.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.PrimeReact.ProgressSpinner.strokeWidth">
            <summary>
                Width of the circle stroke.
                <para>default: 2</para>
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.PrimeReact.ProgressSpinner.fill">
            <summary>
               Color for the background of the circle.
                <para>default: null</para>
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.PrimeReact.ProgressSpinner.animationDuration">
            <summary>
                Duration of the rotate animation.
                <para>default: 2s</para>
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.PrimeReact.RadioButton.value">
            <summary>
            Value of the radiobutton.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.PrimeReact.RadioButton.checked">
            <summary>
                Specifies whether a radiobutton should be checked or not.
                <para>default: false</para>
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.PrimeReact.RadioButton.disabled">
            <summary>
            When present, it specifies that the element value cannot be altered.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.PrimeReact.RadioButton.onChange">
            <summary>
            Callback to invoke on radio button click.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.PrimeReact.Divider.layout">
            <summary>
                Specifies the orientation, valid values are "horizontal" and "vertical".
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.PrimeReact.Divider.align">
            <summary>
                Alignment of the content, options are "left", "center", "right" for horizontal layout and "top", "center", "bottom" for vertical.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.PrimeReact.Divider.type">
            <summary>
            Border style type, default is "solid" and other options are "dashed" and "dotted".
            </summary>
        </member>
        <member name="T:ReactWithDotNet.Libraries.PrimeReact.ScrollPanel">
            <summary>
                ScrollPanel is defined using dimensions for the scrollable viewport.
            </summary>
        </member>
        <member name="T:ReactWithDotNet.Libraries.PrimeReact.Slider">
            <summary>
                Slider is a component to provide input using dragging of a handle.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.PrimeReact.Slider.value">
            <summary>
                Value of the component.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.PrimeReact.Slider.valueBind">
            <summary>
                Value of the component.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.PrimeReact.Slider.min">
            <summary>
                Mininum boundary value.
                <para>Default: 0</para>
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.PrimeReact.Slider.max">
            <summary>
                Maximum boundary value.
                <para>Default: 100</para>
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.PrimeReact.Slider.step">
            <summary>
                Step factor to increment/decrement the value.
                <para>Default: 1</para>
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.PrimeReact.Slider.orientation">
            <summary>
                Orientation of the slider, valid values are horizontal and vertical.
                <para>Default: horizontal</para>
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.PrimeReact.Slider.onChange">
            <summary>
            Callback to invoke on value change via slide.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.PrimeReact.Slider.onSlideEnd">
            <summary>
            Callback to invoke when slide ends.
            </summary>
        </member>
        <member name="T:ReactWithDotNet.Libraries.PrimeReact.Splitter">
            <summary>
            Splitter is utilized to separate and resize panels.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.PrimeReact.Splitter.layout">
            <summary>
            Orientation of the panels, valid values are "horizontal" and "vertical".
            <para>Default: horizontal</para>
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.PrimeReact.Splitter.gutterSize">
            <summary>
            	Size of the divider in pixels.
            <para>Default: 4</para>
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.PrimeReact.TabView.activeIndex">
            <summary>
                Active index of the TabView.
                <para>default: 0</para>
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.PrimeReact.TabView.renderActiveOnly">
            <summary>
                Whether to render the contents of the selected tab or all tabs.
                <para>default: true</para>
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.PrimeReact.TabView.scrollable">
            <summary>
                When enabled displays buttons at each side of the tab headers to scroll the tab list.
                <para>default: false</para>
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.PrimeReact.TabView.onTabChange">
            <summary>
                Callback to invoke when an active tab is changed.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.PrimeReact.TabPanel.header">
            <summary>
                Orientation of tab headers.
                <para>default: null</para>
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.PrimeReact.TabPanel.leftIcon">
            <summary>
                Icons can be placed at left of a header.
                <para>default: null</para>
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.PrimeReact.TabPanel.rightIcon">
            <summary>
                Icons can be placed at right of a header.
                <para>default: null</para>
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.PrimeReact.TabPanel.disabled">
            <summary>
                Whether the tab is disabled.
                <para>default: false</para>
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.PrimeReact.TabPanel.closable">
            <summary>
                Defines if tab can be removed.
                <para>default: false</para>
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.PrimeReact.TabPanel.headerClassName">
            <summary>
                Style class of the tab header.
                <para>default: null</para>
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.PrimeReact.TabPanel.headerStyle">
            <summary>
            Inline style of the tab header.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.PrimeReact.TabPanel.contentClassName">
            <summary>
                Style class of the tab content.
                <para>default: null</para>
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.PrimeReact.TabPanel.contentStyle">
            <summary>
                Inline style of the tab content.
                <para>default: null</para>
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.PrimeReact.Tooltip.position">
            <summary>
            Position of the tooltip, valid values are right, left, top and bottom.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.PrimeReact.Tooltip.target">
            <summary>
            Target element on global tooltip option.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.PrimeReact.Tooltip.showDelay">
            <summary>
            Delay to show the tooltip in milliseconds.
            <para>Default: 0</para>
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.PrimeReact.Tooltip.updateDelay">
            <summary>
            	Delay to update the tooltip in milliseconds.
            <para>Default: 0</para>
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.PrimeReact.Tooltip.hideDelay">
            <summary>
            Delay to hide the tooltip in milliseconds.
            <para>Default: 0</para>
            </summary>
        </member>
        <member name="T:ReactWithDotNet.Libraries.PrimeReact.TooltipPositionType">
            <summary>
                The tooltip position type
            </summary>
        </member>
        <member name="F:ReactWithDotNet.Libraries.PrimeReact.TooltipPositionType.top">
            <summary>
                The top
            </summary>
        </member>
        <member name="F:ReactWithDotNet.Libraries.PrimeReact.TooltipPositionType.bottom">
            <summary>
                The bottom
            </summary>
        </member>
        <member name="F:ReactWithDotNet.Libraries.PrimeReact.TooltipPositionType.left">
            <summary>
                The left
            </summary>
        </member>
        <member name="F:ReactWithDotNet.Libraries.PrimeReact.TooltipPositionType.right">
            <summary>
                The right
            </summary>
        </member>
        <member name="T:ReactWithDotNet.Libraries.PrimeReact.TooltipEventType">
            <summary>
                The tooltip event type
            </summary>
        </member>
        <member name="F:ReactWithDotNet.Libraries.PrimeReact.TooltipEventType.hover">
            <summary>
                The hover
            </summary>
        </member>
        <member name="F:ReactWithDotNet.Libraries.PrimeReact.TooltipEventType.focus">
            <summary>
                The focus
            </summary>
        </member>
        <member name="T:ReactWithDotNet.Libraries.PrimeReact.TooltipOptions">
            <summary>
                The tooltip options
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.PrimeReact.TooltipOptions.className">
            <summary>
                Style class of the tooltip.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.PrimeReact.TooltipOptions.position">
            <summary>
                Position of the tooltip, valid values are right, left, top and bottom.
                <para>Default: right</para>
            </summary>
        </member>
        <member name="F:ReactWithDotNet.Libraries.PrimeReact.TooltipOptions.style">
            <summary>
                Style of the tooltip.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.PrimeReact.TooltipOptions.my">
            <summary>
                Defines which position on the tooltip being positioned to align with the target element.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.PrimeReact.TooltipOptions.at">
            <summary>
                Defines which position on the target element to align the positioned tooltip.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.PrimeReact.TooltipOptions.event">
            <summary>
                Event to show the tooltip, valid values are hover and focus.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.PrimeReact.TooltipOptions.showEvent">
            <summary>
                Event to show the tooltip if the event property is empty.
                <para>Default mouseenter</para>
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.PrimeReact.TooltipOptions.hideEvent">
            <summary>
                Event to hide the tooltip if the event property is empty.
                <para>Default mouseleave</para>
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.PrimeReact.TooltipOptions.autoZIndex">
            <summary>
                Whether to automatically manage layering.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.PrimeReact.TooltipOptions.baseZIndex">
            <summary>
                Base zIndex value to use in layering.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.PrimeReact.TooltipOptions.mouseTrack">
            <summary>
                Whether the tooltip will follow the mouse.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.PrimeReact.TooltipOptions.mouseTrackTop">
            <summary>
                Defines top position of the tooltip in relation to the mouse when the mouseTrack is enabled.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.PrimeReact.TooltipOptions.mouseTrackLeft">
            <summary>
                Defines top position of the tooltip in relation to the mouse when the mouseTrack is enabled.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.PrimeReact.TooltipOptions.showDelay">
            <summary>
                Delay to show the tooltip in milliseconds.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.PrimeReact.TooltipOptions.updateDelay">
            <summary>
                Delay to update the tooltip in milliseconds.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.PrimeReact.TooltipOptions.hideDelay">
            <summary>
                Delay to hide the tooltip in milliseconds.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.PrimeReact.TooltipOptions.autoHide">
            <summary>
                Whether to hide tooltip when hovering over tooltip content.
            <para>Default true</para>
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.PrimeReact.TooltipOptions.disabled">
            <summary>
                Gets or sets a value indicating whether this <see cref="T:ReactWithDotNet.Libraries.PrimeReact.TooltipOptions" /> is disabled.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.PrimeReact.TooltipOptions.showOnDisabled">
            <summary>
                Gets or sets a value indicating whether [show on disabled].
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.PrimeReact.SingleSelectionTree`1.value">
            <summary>
                Selected value to display.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.PrimeReact.SingleSelectionTree`1.filter">
            <summary>
                When specified, displays an input field to filter the items.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.PrimeReact.SingleSelectionTree`1.filterValue">
            <summary>
                When filtering is enabled, the value of input field.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.PrimeReact.SingleSelectionTree`1.filterPlaceholder">
            <summary>
                Placeholder text to show when filter input is empty.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.PrimeReact.SingleSelectionTree`1.filterBy">
            <summary>
                When filtering is enabled, filterBy decides which field or fields (comma separated) to search against.
                <para>Default: label</para>
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.PrimeReact.SingleSelectionTree`1.expandedKeys">
            <summary>
            An array of keys to represent the state of the tree expansion state in controlled mode.
            </summary>
        </member>
        <member name="T:ReactWithDotNet.Libraries.react_datepicker.DatePicker">
            <summary>
                https://github.com/Hacker0x01/react-datepicker/blob/master/src/index.jsx
            </summary>
        </member>
        <member name="T:ReactWithDotNet.Libraries.react_free_scrollbar.FreeScrollBar">
            <summary>
            https://www.npmjs.com/package/react-free-scrollbar
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.react_free_scrollbar.FreeScrollBar.fixed">
            <summary>
            You can pass fixed to decide if handler's position: fixed or static. If fixed equals true, then the handler will overlap the content inside the scroller.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.react_free_scrollbar.FreeScrollBar.autohide">
            <summary>
            Set true if you want a macOS style auto-hide scroller.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.react_free_scrollbar.FreeScrollBar.timeout">
            <summary>
            The time length of the handler disappears. Default: 2000
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.react_free_scrollbar.FreeScrollBar.tracksize">
            <summary>
            The width of the vertical handler or the height of the horizontal handler. Default: 10px
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.react_free_scrollbar.FreeScrollBar.start">
            <summary>
            The starting position of the scroll area, can be descriptive string or an object.
            <br/>
            Options: "bottom", "bottom right", "top right", "right", {top: 20, left: 30}
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.react_free_scrollbar.FreeScrollBar.browserOffset">
            <summary>
            The browser scroll bar width. Default: "17px". It should fit for most browsers.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.react_free_scrollbar.FreeScrollBar.onScrollbarScrollTimeout">
            <summary>
            This timeout adds a throttle for onScrollbarScroll. Default is 300. Set to 0 to remove throttle.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.react_awesome_reveal.RevealBase.reverse">
            <summary>
                Specifies if the animation should make element(s) disappear.<br />
                @default false
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.react_awesome_reveal.RevealBase.cascade">
            <summary>
                <br />Stagger its children animations.
                @default false
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.react_awesome_reveal.RevealBase.childClassName">
            <summary>
                <br /> Class names to add to the child element.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.react_awesome_reveal.RevealBase.childStyle">
            <summary>
                <br /> Inline styles to add to the child element.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.react_awesome_reveal.RevealBase.className">
            <summary>
                <br /> Class names to add to the container element.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.react_awesome_reveal.RevealBase.damping">
            <summary>
                <br /> Factor that affects the delay that each animated element in a cascade animation will be assigned.
                <br />  @default 0.5
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.react_awesome_reveal.RevealBase.delay">
            <summary>
                <br /> Initial delay, in milliseconds.
                <br /> @default 0
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.react_awesome_reveal.RevealBase.duration">
            <summary>
                <br /> Animation duration, in milliseconds.
                <br /> @default 1000
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.react_awesome_reveal.RevealBase.fraction">
            <summary>
                <br /> Float number between 0 and 1 indicating how much the element should be in viewport before the animation is
                triggered.
                <br /> @default 0
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.react_awesome_reveal.RevealBase.triggerOnce">
            <summary>
                <br /> Specifies if the animation should run only once or everytime the element enters/exits/re-enters the
                viewport.
                <br /> @default false
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.react_awesome_reveal.AttentionSeeker.effect">
            <summary>
                The animation effect to use for this attention seeker.
                <br />
                <br />"bounce" | "flash" | "headShake" | "heartBeat" | "jello" | "pulse" | "rubberBand" | "shake" | "shakeX" |
                "shakeY" | "swing" | "tada" | "wobble"
                <br />  @default "bounce"
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.react_awesome_reveal.Bounce.direction">
            <summary>
                <br /> Origin of the animation.
                <br />"down" | "left" | "right" | "up"
                <br />  @default undefined
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.react_awesome_reveal.Fade.big">
            <summary>
                <br /> Causes the animation to start farther. Only works with "down", "left", "right" and "up" directions.
                <br /> @default false
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.react_awesome_reveal.Fade.direction">
            <summary>
                <br /> Origin of the animation.
                <br /> @default undefined
                <br /> "bottom-left" | "bottom-right" | "down" | "left" | "right" | "top-left" | "top-right" | "up"
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.react_awesome_reveal.Flip.direction">
            <summary>
                <br /> Origin of the animation.
                <br /> @default undefined
                <br /> "horizontal" | "vertical"
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.react_awesome_reveal.Rotate.direction">
            <summary>
                <br /> Origin of the animation.
                <br /> @default undefined
                <br />  "bottom-left" | "bottom-right" | "top-left" | "top-right"
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.react_awesome_reveal.Slide.direction">
            <summary>
                <br /> Origin of the animation.
                <br /> @default undefined
                <br />  "down" | "left" | "right" | "up"
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.react_awesome_reveal.Zoom.direction">
            <summary>
                <br /> Origin of the animation.
                <br /> @default undefined
                <br />  "down" | "left" | "right" | "up"
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.uiw.react_codemirror.CodeMirror.valueBindDebounceHandler">
            <summary>
            if you want to handle when user iteraction finished see example below<br/>
            component.valueBind = ()=>state.UserInfo.Name<br/>
            component.valueBindDebounceTimeout = 600 // milliseconds<br/>
            component.valueBindDebounceHandler = OnUserIterationFinished<br/>
            </summary>
        </member>
        <member name="P:ReactWithDotNet.Libraries.uiw.react_codemirror.CodeMirror.valueBindDebounceTimeout">
            <summary>
            if you want to handle when user iteraction finished see example below<br/>
            component.valueBind = ()=>state.UserInfo.Name<br/>
            component.valueBindDebounceTimeout = 600 // milliseconds<br/>
            component.valueBindDebounceHandler = OnUserIterationFinished<br/>
            </summary>
        </member>
        <member name="P:ReactWithDotNet.react_xarrows.Xarrow.start">
            <summary>
                required
                can be a reference to a react ref to html element or string - an id of a DOM element.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.react_xarrows.Xarrow.end">
            <summary>
                required
                can be a reference to a react ref to html element or string - an id of a DOM element.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.react_xarrows.Xarrow.startAnchor">
            <summary>
                "auto" | "middle" | "left" | "right" | "top" | "bottom"
            </summary>
        </member>
        <member name="P:ReactWithDotNet.react_xarrows.Xarrow.endAnchor">
            <summary>
                "auto" | "middle" | "left" | "right" | "top" | "bottom"
            </summary>
        </member>
        <member name="P:ReactWithDotNet.react_xarrows.Xarrow.color">
            <summary>
                defines color to the entire arrow. lineColor,headColor and tailColor will override color specifically for line,tail
                or head
            </summary>
        </member>
        <member name="P:ReactWithDotNet.react_xarrows.Xarrow.strokeWidth">
            <summary>
                defines the thickness of the entire arrow. headSize and tailSize defines how big will be the head or tail relative
                to the strokeWidth
            </summary>
        </member>
        <member name="P:ReactWithDotNet.react_xarrows.Xarrow.path">
            <summary>
                can be one of: "smooth" | "grid" | "straight", and it controls the path arrow is drawn, exactly how their name
                suggest
            </summary>
        </member>
        <member name="P:ReactWithDotNet.react_xarrows.Xarrow.curveness">
            <summary>
                defines how much the lines curve. makes a difference only in path='smooth'
            </summary>
        </member>
        <member name="P:ReactWithDotNet.react_xarrows.Xarrow.dashness">
            <summary>
                can make the arrow dashed and can even animate. if true default values(for dashness) are chosen. if object is passed then default values are chosen except what passed.
            </summary>
        </member>
        <member name="P:ReactWithDotNet.react_xarrows.Xarrow.animateDrawing">
            <summary>
                can animate the drawing of the arrow using svg animation. type: boolean|number. if true animation duration is 1s.
                if number is passed then animation duration is number's value in seconds
                <example>animateDrawing={0.1} will animate the drawing of the arrow in 100 milliseconds.</example>
            </summary>
        </member>
        <member name="P:ReactWithDotNet.react_xarrows.Xarrow.headShape">
            <summary>
            you can customize the svg edges (head or tail) of the arrow. you can use predefined svg by passing string,one of "arrow1" | "circle" | "heart"
            </summary>
        </member>
        <member name="P:ReactWithDotNet.react_xarrows.Xarrow.tailShape">
            <summary>
            you can customize the svg edges (head or tail) of the arrow. you can use predefined svg by passing string,one of "arrow1" | "circle" | "heart"
            </summary>
        </member>
    </members>
</doc>
